
rpi_sensor_hat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037b4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08003874  08003874  00013874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800395c  0800395c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003964  08003964  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003964  08003964  00013964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003968  08003968  00013968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800396c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000070  080039dc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  080039dc  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7b5  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d34  00000000  00000000  0002c84d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c48  00000000  00000000  0002e588  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b80  00000000  00000000  0002f1d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000039c2  00000000  00000000  0002fd50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a0e7  00000000  00000000  00033712  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007b91d  00000000  00000000  0003d7f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b9116  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031c0  00000000  00000000  000b9194  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800385c 	.word	0x0800385c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	0800385c 	.word	0x0800385c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4343      	muls	r3, r0
 8000298:	4351      	muls	r1, r2
 800029a:	0c25      	lsrs	r5, r4, #16
 800029c:	0436      	lsls	r6, r6, #16
 800029e:	4465      	add	r5, ip
 80002a0:	0c36      	lsrs	r6, r6, #16
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	195b      	adds	r3, r3, r5
 80002a8:	1859      	adds	r1, r3, r1
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	464f      	mov	r7, r9
 80002b8:	4646      	mov	r6, r8
 80002ba:	46d6      	mov	lr, sl
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	0004      	movs	r4, r0
 80002c0:	b082      	sub	sp, #8
 80002c2:	000d      	movs	r5, r1
 80002c4:	4691      	mov	r9, r2
 80002c6:	4698      	mov	r8, r3
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d82f      	bhi.n	800032c <__udivmoddi4+0x78>
 80002cc:	d02c      	beq.n	8000328 <__udivmoddi4+0x74>
 80002ce:	4641      	mov	r1, r8
 80002d0:	4648      	mov	r0, r9
 80002d2:	f000 f8b1 	bl	8000438 <__clzdi2>
 80002d6:	0029      	movs	r1, r5
 80002d8:	0006      	movs	r6, r0
 80002da:	0020      	movs	r0, r4
 80002dc:	f000 f8ac 	bl	8000438 <__clzdi2>
 80002e0:	1a33      	subs	r3, r6, r0
 80002e2:	469c      	mov	ip, r3
 80002e4:	3b20      	subs	r3, #32
 80002e6:	469a      	mov	sl, r3
 80002e8:	d500      	bpl.n	80002ec <__udivmoddi4+0x38>
 80002ea:	e076      	b.n	80003da <__udivmoddi4+0x126>
 80002ec:	464b      	mov	r3, r9
 80002ee:	4652      	mov	r2, sl
 80002f0:	4093      	lsls	r3, r2
 80002f2:	001f      	movs	r7, r3
 80002f4:	464b      	mov	r3, r9
 80002f6:	4662      	mov	r2, ip
 80002f8:	4093      	lsls	r3, r2
 80002fa:	001e      	movs	r6, r3
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d828      	bhi.n	8000352 <__udivmoddi4+0x9e>
 8000300:	d025      	beq.n	800034e <__udivmoddi4+0x9a>
 8000302:	4653      	mov	r3, sl
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5a>
 800030c:	e07b      	b.n	8000406 <__udivmoddi4+0x152>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	4652      	mov	r2, sl
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4662      	mov	r2, ip
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e018      	b.n	800035a <__udivmoddi4+0xa6>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9d0      	bls.n	80002ce <__udivmoddi4+0x1a>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8a>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b002      	add	sp, #8
 8000344:	bc1c      	pop	{r2, r3, r4}
 8000346:	4690      	mov	r8, r2
 8000348:	4699      	mov	r9, r3
 800034a:	46a2      	mov	sl, r4
 800034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034e:	42a3      	cmp	r3, r4
 8000350:	d9d7      	bls.n	8000302 <__udivmoddi4+0x4e>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	4663      	mov	r3, ip
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0e9      	beq.n	8000334 <__udivmoddi4+0x80>
 8000360:	07fb      	lsls	r3, r7, #31
 8000362:	4698      	mov	r8, r3
 8000364:	4641      	mov	r1, r8
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	430a      	orrs	r2, r1
 800036a:	087b      	lsrs	r3, r7, #1
 800036c:	4666      	mov	r6, ip
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	9800      	ldr	r0, [sp, #0]
 800039e:	9901      	ldr	r1, [sp, #4]
 80003a0:	4653      	mov	r3, sl
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db23      	blt.n	80003f2 <__udivmoddi4+0x13e>
 80003aa:	002b      	movs	r3, r5
 80003ac:	4652      	mov	r2, sl
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4664      	mov	r4, ip
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2d      	blt.n	800041c <__udivmoddi4+0x168>
 80003c0:	0026      	movs	r6, r4
 80003c2:	4657      	mov	r7, sl
 80003c4:	40be      	lsls	r6, r7
 80003c6:	0033      	movs	r3, r6
 80003c8:	0026      	movs	r6, r4
 80003ca:	4667      	mov	r7, ip
 80003cc:	40be      	lsls	r6, r7
 80003ce:	0032      	movs	r2, r6
 80003d0:	1a80      	subs	r0, r0, r2
 80003d2:	4199      	sbcs	r1, r3
 80003d4:	9000      	str	r0, [sp, #0]
 80003d6:	9101      	str	r1, [sp, #4]
 80003d8:	e7ac      	b.n	8000334 <__udivmoddi4+0x80>
 80003da:	4662      	mov	r2, ip
 80003dc:	2320      	movs	r3, #32
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	40da      	lsrs	r2, r3
 80003e4:	4661      	mov	r1, ip
 80003e6:	0013      	movs	r3, r2
 80003e8:	4642      	mov	r2, r8
 80003ea:	408a      	lsls	r2, r1
 80003ec:	0017      	movs	r7, r2
 80003ee:	431f      	orrs	r7, r3
 80003f0:	e780      	b.n	80002f4 <__udivmoddi4+0x40>
 80003f2:	4662      	mov	r2, ip
 80003f4:	2320      	movs	r3, #32
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	002a      	movs	r2, r5
 80003fa:	4666      	mov	r6, ip
 80003fc:	409a      	lsls	r2, r3
 80003fe:	0023      	movs	r3, r4
 8000400:	40f3      	lsrs	r3, r6
 8000402:	4313      	orrs	r3, r2
 8000404:	e7d4      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000406:	4662      	mov	r2, ip
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e780      	b.n	800031e <__udivmoddi4+0x6a>
 800041c:	2320      	movs	r3, #32
 800041e:	4662      	mov	r2, ip
 8000420:	0026      	movs	r6, r4
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	40de      	lsrs	r6, r3
 8000426:	002f      	movs	r7, r5
 8000428:	46b0      	mov	r8, r6
 800042a:	4666      	mov	r6, ip
 800042c:	40b7      	lsls	r7, r6
 800042e:	4646      	mov	r6, r8
 8000430:	003b      	movs	r3, r7
 8000432:	4333      	orrs	r3, r6
 8000434:	e7c8      	b.n	80003c8 <__udivmoddi4+0x114>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__clzdi2>:
 8000438:	b510      	push	{r4, lr}
 800043a:	2900      	cmp	r1, #0
 800043c:	d103      	bne.n	8000446 <__clzdi2+0xe>
 800043e:	f000 f807 	bl	8000450 <__clzsi2>
 8000442:	3020      	adds	r0, #32
 8000444:	e002      	b.n	800044c <__clzdi2+0x14>
 8000446:	1c08      	adds	r0, r1, #0
 8000448:	f000 f802 	bl	8000450 <__clzsi2>
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__clzsi2>:
 8000450:	211c      	movs	r1, #28
 8000452:	2301      	movs	r3, #1
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	4298      	cmp	r0, r3
 8000458:	d301      	bcc.n	800045e <__clzsi2+0xe>
 800045a:	0c00      	lsrs	r0, r0, #16
 800045c:	3910      	subs	r1, #16
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	4298      	cmp	r0, r3
 8000462:	d301      	bcc.n	8000468 <__clzsi2+0x18>
 8000464:	0a00      	lsrs	r0, r0, #8
 8000466:	3908      	subs	r1, #8
 8000468:	091b      	lsrs	r3, r3, #4
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0x22>
 800046e:	0900      	lsrs	r0, r0, #4
 8000470:	3904      	subs	r1, #4
 8000472:	a202      	add	r2, pc, #8	; (adr r2, 800047c <__clzsi2+0x2c>)
 8000474:	5c10      	ldrb	r0, [r2, r0]
 8000476:	1840      	adds	r0, r0, r1
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	02020304 	.word	0x02020304
 8000480:	01010101 	.word	0x01010101
	...

0800048c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000490:	f000 fc28 	bl	8000ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000494:	f000 f832 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000498:	f000 f97a 	bl	8000790 <MX_GPIO_Init>
  MX_I2C1_Init();
 800049c:	f000 f8a0 	bl	80005e0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004a0:	f000 f8de 	bl	8000660 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80004a4:	f000 f914 	bl	80006d0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004a8:	f000 f942 	bl	8000730 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004ac:	2380      	movs	r3, #128	; 0x80
 80004ae:	0219      	lsls	r1, r3, #8
 80004b0:	23a0      	movs	r3, #160	; 0xa0
 80004b2:	05db      	lsls	r3, r3, #23
 80004b4:	2200      	movs	r2, #0
 80004b6:	0018      	movs	r0, r3
 80004b8:	f000 fed0 	bl	800125c <HAL_GPIO_WritePin>
	  printf("LED is off\n");
 80004bc:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <main+0x68>)
 80004be:	0018      	movs	r0, r3
 80004c0:	f002 fd84 	bl	8002fcc <puts>
	  HAL_Delay(1000);
 80004c4:	23fa      	movs	r3, #250	; 0xfa
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	0018      	movs	r0, r3
 80004ca:	f000 fc7b 	bl	8000dc4 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80004ce:	2380      	movs	r3, #128	; 0x80
 80004d0:	0219      	lsls	r1, r3, #8
 80004d2:	23a0      	movs	r3, #160	; 0xa0
 80004d4:	05db      	lsls	r3, r3, #23
 80004d6:	2201      	movs	r2, #1
 80004d8:	0018      	movs	r0, r3
 80004da:	f000 febf 	bl	800125c <HAL_GPIO_WritePin>
	  printf("LED is on\n");
 80004de:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <main+0x6c>)
 80004e0:	0018      	movs	r0, r3
 80004e2:	f002 fd73 	bl	8002fcc <puts>
	  HAL_Delay(1000);
 80004e6:	23fa      	movs	r3, #250	; 0xfa
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	0018      	movs	r0, r3
 80004ec:	f000 fc6a 	bl	8000dc4 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004f0:	e7dc      	b.n	80004ac <main+0x20>
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	08003874 	.word	0x08003874
 80004f8:	08003880 	.word	0x08003880

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b590      	push	{r4, r7, lr}
 80004fe:	b09d      	sub	sp, #116	; 0x74
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	2438      	movs	r4, #56	; 0x38
 8000504:	193b      	adds	r3, r7, r4
 8000506:	0018      	movs	r0, r3
 8000508:	2338      	movs	r3, #56	; 0x38
 800050a:	001a      	movs	r2, r3
 800050c:	2100      	movs	r1, #0
 800050e:	f002 fcf5 	bl	8002efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000512:	2324      	movs	r3, #36	; 0x24
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	0018      	movs	r0, r3
 8000518:	2314      	movs	r3, #20
 800051a:	001a      	movs	r2, r3
 800051c:	2100      	movs	r1, #0
 800051e:	f002 fced 	bl	8002efc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	0018      	movs	r0, r3
 8000526:	2320      	movs	r3, #32
 8000528:	001a      	movs	r2, r3
 800052a:	2100      	movs	r1, #0
 800052c:	f002 fce6 	bl	8002efc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000530:	4b29      	ldr	r3, [pc, #164]	; (80005d8 <SystemClock_Config+0xdc>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a29      	ldr	r2, [pc, #164]	; (80005dc <SystemClock_Config+0xe0>)
 8000536:	401a      	ands	r2, r3
 8000538:	4b27      	ldr	r3, [pc, #156]	; (80005d8 <SystemClock_Config+0xdc>)
 800053a:	2180      	movs	r1, #128	; 0x80
 800053c:	0109      	lsls	r1, r1, #4
 800053e:	430a      	orrs	r2, r1
 8000540:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000542:	0021      	movs	r1, r4
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2210      	movs	r2, #16
 8000548:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2201      	movs	r2, #1
 800054e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2200      	movs	r2, #0
 8000554:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2280      	movs	r2, #128	; 0x80
 800055a:	0212      	lsls	r2, r2, #8
 800055c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000564:	187b      	adds	r3, r7, r1
 8000566:	0018      	movs	r0, r3
 8000568:	f000 ffc4 	bl	80014f4 <HAL_RCC_OscConfig>
 800056c:	1e03      	subs	r3, r0, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000570:	f000 f9dc 	bl	800092c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000574:	2124      	movs	r1, #36	; 0x24
 8000576:	187b      	adds	r3, r7, r1
 8000578:	220f      	movs	r2, #15
 800057a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2200      	movs	r2, #0
 8000580:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2100      	movs	r1, #0
 8000598:	0018      	movs	r0, r3
 800059a:	f001 fb73 	bl	8001c84 <HAL_RCC_ClockConfig>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005a2:	f000 f9c3 	bl	800092c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	220b      	movs	r2, #11
 80005aa:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2200      	movs	r2, #0
 80005b6:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2200      	movs	r2, #0
 80005bc:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	0018      	movs	r0, r3
 80005c2:	f001 fd7f 	bl	80020c4 <HAL_RCCEx_PeriphCLKConfig>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005ca:	f000 f9af 	bl	800092c <Error_Handler>
  }
}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	b01d      	add	sp, #116	; 0x74
 80005d4:	bd90      	pop	{r4, r7, pc}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	40007000 	.word	0x40007000
 80005dc:	ffffe7ff 	.word	0xffffe7ff

080005e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e4:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <MX_I2C1_Init+0x74>)
 80005e6:	4a1c      	ldr	r2, [pc, #112]	; (8000658 <MX_I2C1_Init+0x78>)
 80005e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000202;
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <MX_I2C1_Init+0x74>)
 80005ec:	4a1b      	ldr	r2, [pc, #108]	; (800065c <MX_I2C1_Init+0x7c>)
 80005ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 2;
 80005f0:	4b18      	ldr	r3, [pc, #96]	; (8000654 <MX_I2C1_Init+0x74>)
 80005f2:	2202      	movs	r2, #2
 80005f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <MX_I2C1_Init+0x74>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005fc:	4b15      	ldr	r3, [pc, #84]	; (8000654 <MX_I2C1_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <MX_I2C1_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_I2C1_Init+0x74>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_I2C1_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_I2C1_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_I2C1_Init+0x74>)
 800061c:	0018      	movs	r0, r3
 800061e:	f000 fe3b 	bl	8001298 <HAL_I2C_Init>
 8000622:	1e03      	subs	r3, r0, #0
 8000624:	d001      	beq.n	800062a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000626:	f000 f981 	bl	800092c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <MX_I2C1_Init+0x74>)
 800062c:	2100      	movs	r1, #0
 800062e:	0018      	movs	r0, r3
 8000630:	f000 fec8 	bl	80013c4 <HAL_I2CEx_ConfigAnalogFilter>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000638:	f000 f978 	bl	800092c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <MX_I2C1_Init+0x74>)
 800063e:	2100      	movs	r1, #0
 8000640:	0018      	movs	r0, r3
 8000642:	f000 ff0b 	bl	800145c <HAL_I2CEx_ConfigDigitalFilter>
 8000646:	1e03      	subs	r3, r0, #0
 8000648:	d001      	beq.n	800064e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800064a:	f000 f96f 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000098 	.word	0x20000098
 8000658:	40005400 	.word	0x40005400
 800065c:	00000202 	.word	0x00000202

08000660 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000664:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <MX_SPI1_Init+0x68>)
 8000666:	4a19      	ldr	r2, [pc, #100]	; (80006cc <MX_SPI1_Init+0x6c>)
 8000668:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <MX_SPI1_Init+0x68>)
 800066c:	2282      	movs	r2, #130	; 0x82
 800066e:	0052      	lsls	r2, r2, #1
 8000670:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <MX_SPI1_Init+0x68>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000678:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <MX_SPI1_Init+0x68>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800067e:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_SPI1_Init+0x68>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000684:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_SPI1_Init+0x68>)
 8000686:	2200      	movs	r2, #0
 8000688:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_SPI1_Init+0x68>)
 800068c:	2280      	movs	r2, #128	; 0x80
 800068e:	0092      	lsls	r2, r2, #2
 8000690:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <MX_SPI1_Init+0x68>)
 8000694:	2200      	movs	r2, #0
 8000696:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000698:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_SPI1_Init+0x68>)
 800069a:	2200      	movs	r2, #0
 800069c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <MX_SPI1_Init+0x68>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_SPI1_Init+0x68>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006aa:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <MX_SPI1_Init+0x68>)
 80006ac:	2207      	movs	r2, #7
 80006ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <MX_SPI1_Init+0x68>)
 80006b2:	0018      	movs	r0, r3
 80006b4:	f001 fe4e 	bl	8002354 <HAL_SPI_Init>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d001      	beq.n	80006c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006bc:	f000 f936 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	20000168 	.word	0x20000168
 80006cc:	40013000 	.word	0x40013000

080006d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006d6:	4a15      	ldr	r2, [pc, #84]	; (800072c <MX_USART1_UART_Init+0x5c>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006dc:	2296      	movs	r2, #150	; 0x96
 80006de:	0192      	lsls	r2, r2, #6
 80006e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_USART1_UART_Init+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_USART1_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_USART1_UART_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000712:	4b05      	ldr	r3, [pc, #20]	; (8000728 <MX_USART1_UART_Init+0x58>)
 8000714:	0018      	movs	r0, r3
 8000716:	f001 feb1 	bl	800247c <HAL_UART_Init>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800071e:	f000 f905 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200000e4 	.word	0x200000e4
 800072c:	40013800 	.word	0x40013800

08000730 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000736:	4a15      	ldr	r2, [pc, #84]	; (800078c <MX_USART2_UART_Init+0x5c>)
 8000738:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_USART2_UART_Init+0x58>)
 800073c:	2296      	movs	r2, #150	; 0x96
 800073e:	0192      	lsls	r2, r2, #6
 8000740:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_USART2_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART2_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART2_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000774:	0018      	movs	r0, r3
 8000776:	f001 fe81 	bl	800247c <HAL_UART_Init>
 800077a:	1e03      	subs	r3, r0, #0
 800077c:	d001      	beq.n	8000782 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800077e:	f000 f8d5 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200001c0 	.word	0x200001c0
 800078c:	40004400 	.word	0x40004400

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b089      	sub	sp, #36	; 0x24
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	240c      	movs	r4, #12
 8000798:	193b      	adds	r3, r7, r4
 800079a:	0018      	movs	r0, r3
 800079c:	2314      	movs	r3, #20
 800079e:	001a      	movs	r2, r3
 80007a0:	2100      	movs	r1, #0
 80007a2:	f002 fbab 	bl	8002efc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b45      	ldr	r3, [pc, #276]	; (80008bc <MX_GPIO_Init+0x12c>)
 80007a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007aa:	4b44      	ldr	r3, [pc, #272]	; (80008bc <MX_GPIO_Init+0x12c>)
 80007ac:	2104      	movs	r1, #4
 80007ae:	430a      	orrs	r2, r1
 80007b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80007b2:	4b42      	ldr	r3, [pc, #264]	; (80008bc <MX_GPIO_Init+0x12c>)
 80007b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b6:	2204      	movs	r2, #4
 80007b8:	4013      	ands	r3, r2
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b3f      	ldr	r3, [pc, #252]	; (80008bc <MX_GPIO_Init+0x12c>)
 80007c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007c2:	4b3e      	ldr	r3, [pc, #248]	; (80008bc <MX_GPIO_Init+0x12c>)
 80007c4:	2101      	movs	r1, #1
 80007c6:	430a      	orrs	r2, r1
 80007c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80007ca:	4b3c      	ldr	r3, [pc, #240]	; (80008bc <MX_GPIO_Init+0x12c>)
 80007cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ce:	2201      	movs	r2, #1
 80007d0:	4013      	ands	r3, r2
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b39      	ldr	r3, [pc, #228]	; (80008bc <MX_GPIO_Init+0x12c>)
 80007d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007da:	4b38      	ldr	r3, [pc, #224]	; (80008bc <MX_GPIO_Init+0x12c>)
 80007dc:	2102      	movs	r1, #2
 80007de:	430a      	orrs	r2, r1
 80007e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80007e2:	4b36      	ldr	r3, [pc, #216]	; (80008bc <MX_GPIO_Init+0x12c>)
 80007e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e6:	2202      	movs	r2, #2
 80007e8:	4013      	ands	r3, r2
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FRAM_CS_Pin|SENSOR_CS_Pin|FRAM_WP_Pin|FRAM_HOLD_Pin, GPIO_PIN_SET);
 80007ee:	4934      	ldr	r1, [pc, #208]	; (80008c0 <MX_GPIO_Init+0x130>)
 80007f0:	23a0      	movs	r3, #160	; 0xa0
 80007f2:	05db      	lsls	r3, r3, #23
 80007f4:	2201      	movs	r2, #1
 80007f6:	0018      	movs	r0, r3
 80007f8:	f000 fd30 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007fc:	2380      	movs	r3, #128	; 0x80
 80007fe:	0219      	lsls	r1, r3, #8
 8000800:	23a0      	movs	r3, #160	; 0xa0
 8000802:	05db      	lsls	r3, r3, #23
 8000804:	2200      	movs	r2, #0
 8000806:	0018      	movs	r0, r3
 8000808:	f000 fd28 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800080c:	193b      	adds	r3, r7, r4
 800080e:	22c0      	movs	r2, #192	; 0xc0
 8000810:	0212      	lsls	r2, r2, #8
 8000812:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000814:	193b      	adds	r3, r7, r4
 8000816:	2200      	movs	r2, #0
 8000818:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800081a:	193b      	adds	r3, r7, r4
 800081c:	2202      	movs	r2, #2
 800081e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000820:	193b      	adds	r3, r7, r4
 8000822:	4a28      	ldr	r2, [pc, #160]	; (80008c4 <MX_GPIO_Init+0x134>)
 8000824:	0019      	movs	r1, r3
 8000826:	0010      	movs	r0, r2
 8000828:	f000 fba2 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 GPIO27_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO27_IRQ_Pin;
 800082c:	193b      	adds	r3, r7, r4
 800082e:	2203      	movs	r2, #3
 8000830:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000832:	193b      	adds	r3, r7, r4
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000838:	193b      	adds	r3, r7, r4
 800083a:	2202      	movs	r2, #2
 800083c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083e:	193a      	adds	r2, r7, r4
 8000840:	23a0      	movs	r3, #160	; 0xa0
 8000842:	05db      	lsls	r3, r3, #23
 8000844:	0011      	movs	r1, r2
 8000846:	0018      	movs	r0, r3
 8000848:	f000 fb92 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : FRAM_CS_Pin SENSOR_CS_Pin FRAM_WP_Pin FRAM_HOLD_Pin
                           LED_Pin */
  GPIO_InitStruct.Pin = FRAM_CS_Pin|SENSOR_CS_Pin|FRAM_WP_Pin|FRAM_HOLD_Pin
 800084c:	193b      	adds	r3, r7, r4
 800084e:	4a1e      	ldr	r2, [pc, #120]	; (80008c8 <MX_GPIO_Init+0x138>)
 8000850:	601a      	str	r2, [r3, #0]
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	193b      	adds	r3, r7, r4
 8000854:	2201      	movs	r2, #1
 8000856:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	193b      	adds	r3, r7, r4
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	193b      	adds	r3, r7, r4
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	193a      	adds	r2, r7, r4
 8000866:	23a0      	movs	r3, #160	; 0xa0
 8000868:	05db      	lsls	r3, r3, #23
 800086a:	0011      	movs	r1, r2
 800086c:	0018      	movs	r0, r3
 800086e:	f000 fb7f 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : REV_BIT0_Pin REV_BIT1_Pin REV_BIT2_Pin VMONITOR_Pin */
  GPIO_InitStruct.Pin = REV_BIT0_Pin|REV_BIT1_Pin|REV_BIT2_Pin|VMONITOR_Pin;
 8000872:	0021      	movs	r1, r4
 8000874:	187b      	adds	r3, r7, r1
 8000876:	221b      	movs	r2, #27
 8000878:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2200      	movs	r2, #0
 800087e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000886:	000c      	movs	r4, r1
 8000888:	187b      	adds	r3, r7, r1
 800088a:	4a10      	ldr	r2, [pc, #64]	; (80008cc <MX_GPIO_Init+0x13c>)
 800088c:	0019      	movs	r1, r3
 800088e:	0010      	movs	r0, r2
 8000890:	f000 fb6e 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000894:	0021      	movs	r1, r4
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2220      	movs	r2, #32
 800089a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2202      	movs	r2, #2
 80008a6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	4a08      	ldr	r2, [pc, #32]	; (80008cc <MX_GPIO_Init+0x13c>)
 80008ac:	0019      	movs	r1, r3
 80008ae:	0010      	movs	r0, r2
 80008b0:	f000 fb5e 	bl	8000f70 <HAL_GPIO_Init>

}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b009      	add	sp, #36	; 0x24
 80008ba:	bd90      	pop	{r4, r7, pc}
 80008bc:	40021000 	.word	0x40021000
 80008c0:	00001910 	.word	0x00001910
 80008c4:	50000800 	.word	0x50000800
 80008c8:	00009910 	.word	0x00009910
 80008cc:	50000400 	.word	0x50000400

080008d0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *data, int len)
{
 80008d0:	b5b0      	push	{r4, r5, r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
	if((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d00a      	beq.n	80008f8 <_write+0x28>
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d007      	beq.n	80008f8 <_write+0x28>
	{
		errno = EBADF;
 80008e8:	f002 fade 	bl	8002ea8 <__errno>
 80008ec:	0003      	movs	r3, r0
 80008ee:	2209      	movs	r2, #9
 80008f0:	601a      	str	r2, [r3, #0]
		return -1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	425b      	negs	r3, r3
 80008f6:	e012      	b.n	800091e <_write+0x4e>
	}
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t *)data, len, 1000);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	2517      	movs	r5, #23
 80008fe:	197c      	adds	r4, r7, r5
 8000900:	23fa      	movs	r3, #250	; 0xfa
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	68b9      	ldr	r1, [r7, #8]
 8000906:	4808      	ldr	r0, [pc, #32]	; (8000928 <_write+0x58>)
 8000908:	f001 fe0c 	bl	8002524 <HAL_UART_Transmit>
 800090c:	0003      	movs	r3, r0
 800090e:	7023      	strb	r3, [r4, #0]
	return (status == HAL_OK ? len : 0);
 8000910:	197b      	adds	r3, r7, r5
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d101      	bne.n	800091c <_write+0x4c>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	e000      	b.n	800091e <_write+0x4e>
 800091c:	2300      	movs	r3, #0
}
 800091e:	0018      	movs	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	b006      	add	sp, #24
 8000924:	bdb0      	pop	{r4, r5, r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	200001c0 	.word	0x200001c0

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000932:	e7fe      	b.n	8000932 <Error_Handler+0x6>

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <HAL_MspInit+0x24>)
 800093a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_MspInit+0x24>)
 800093e:	2101      	movs	r1, #1
 8000940:	430a      	orrs	r2, r1
 8000942:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <HAL_MspInit+0x24>)
 8000946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <HAL_MspInit+0x24>)
 800094a:	2180      	movs	r1, #128	; 0x80
 800094c:	0549      	lsls	r1, r1, #21
 800094e:	430a      	orrs	r2, r1
 8000950:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40021000 	.word	0x40021000

0800095c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	230c      	movs	r3, #12
 8000966:	18fb      	adds	r3, r7, r3
 8000968:	0018      	movs	r0, r3
 800096a:	2314      	movs	r3, #20
 800096c:	001a      	movs	r2, r3
 800096e:	2100      	movs	r1, #0
 8000970:	f002 fac4 	bl	8002efc <memset>
  if(hi2c->Instance==I2C1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a17      	ldr	r2, [pc, #92]	; (80009d8 <HAL_I2C_MspInit+0x7c>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d128      	bne.n	80009d0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4b17      	ldr	r3, [pc, #92]	; (80009dc <HAL_I2C_MspInit+0x80>)
 8000980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <HAL_I2C_MspInit+0x80>)
 8000984:	2102      	movs	r1, #2
 8000986:	430a      	orrs	r2, r1
 8000988:	62da      	str	r2, [r3, #44]	; 0x2c
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <HAL_I2C_MspInit+0x80>)
 800098c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800098e:	2202      	movs	r2, #2
 8000990:	4013      	ands	r3, r2
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000996:	210c      	movs	r1, #12
 8000998:	187b      	adds	r3, r7, r1
 800099a:	22c0      	movs	r2, #192	; 0xc0
 800099c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2212      	movs	r2, #18
 80009a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2201      	movs	r2, #1
 80009a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2203      	movs	r2, #3
 80009ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2201      	movs	r2, #1
 80009b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	4a09      	ldr	r2, [pc, #36]	; (80009e0 <HAL_I2C_MspInit+0x84>)
 80009ba:	0019      	movs	r1, r3
 80009bc:	0010      	movs	r0, r2
 80009be:	f000 fad7 	bl	8000f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_I2C_MspInit+0x80>)
 80009c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009c6:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HAL_I2C_MspInit+0x80>)
 80009c8:	2180      	movs	r1, #128	; 0x80
 80009ca:	0389      	lsls	r1, r1, #14
 80009cc:	430a      	orrs	r2, r1
 80009ce:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b008      	add	sp, #32
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40005400 	.word	0x40005400
 80009dc:	40021000 	.word	0x40021000
 80009e0:	50000400 	.word	0x50000400

080009e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	230c      	movs	r3, #12
 80009ee:	18fb      	adds	r3, r7, r3
 80009f0:	0018      	movs	r0, r3
 80009f2:	2314      	movs	r3, #20
 80009f4:	001a      	movs	r2, r3
 80009f6:	2100      	movs	r1, #0
 80009f8:	f002 fa80 	bl	8002efc <memset>
  if(hspi->Instance==SPI1)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a18      	ldr	r2, [pc, #96]	; (8000a64 <HAL_SPI_MspInit+0x80>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d129      	bne.n	8000a5a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <HAL_SPI_MspInit+0x84>)
 8000a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <HAL_SPI_MspInit+0x84>)
 8000a0c:	2180      	movs	r1, #128	; 0x80
 8000a0e:	0149      	lsls	r1, r1, #5
 8000a10:	430a      	orrs	r2, r1
 8000a12:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <HAL_SPI_MspInit+0x84>)
 8000a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a18:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <HAL_SPI_MspInit+0x84>)
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <HAL_SPI_MspInit+0x84>)
 8000a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a24:	2201      	movs	r2, #1
 8000a26:	4013      	ands	r3, r2
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a2c:	210c      	movs	r1, #12
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	22e0      	movs	r2, #224	; 0xe0
 8000a32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2202      	movs	r2, #2
 8000a38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2203      	movs	r2, #3
 8000a44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	187a      	adds	r2, r7, r1
 8000a4e:	23a0      	movs	r3, #160	; 0xa0
 8000a50:	05db      	lsls	r3, r3, #23
 8000a52:	0011      	movs	r1, r2
 8000a54:	0018      	movs	r0, r3
 8000a56:	f000 fa8b 	bl	8000f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b008      	add	sp, #32
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	40013000 	.word	0x40013000
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	2314      	movs	r3, #20
 8000a76:	18fb      	adds	r3, r7, r3
 8000a78:	0018      	movs	r0, r3
 8000a7a:	2314      	movs	r3, #20
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	2100      	movs	r1, #0
 8000a80:	f002 fa3c 	bl	8002efc <memset>
  if(huart->Instance==USART1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a30      	ldr	r2, [pc, #192]	; (8000b4c <HAL_UART_MspInit+0xe0>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d12b      	bne.n	8000ae6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a8e:	4b30      	ldr	r3, [pc, #192]	; (8000b50 <HAL_UART_MspInit+0xe4>)
 8000a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a92:	4b2f      	ldr	r3, [pc, #188]	; (8000b50 <HAL_UART_MspInit+0xe4>)
 8000a94:	2180      	movs	r1, #128	; 0x80
 8000a96:	01c9      	lsls	r1, r1, #7
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9c:	4b2c      	ldr	r3, [pc, #176]	; (8000b50 <HAL_UART_MspInit+0xe4>)
 8000a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aa0:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <HAL_UART_MspInit+0xe4>)
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aa8:	4b29      	ldr	r3, [pc, #164]	; (8000b50 <HAL_UART_MspInit+0xe4>)
 8000aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aac:	2201      	movs	r2, #1
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ab4:	2114      	movs	r1, #20
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	22c0      	movs	r2, #192	; 0xc0
 8000aba:	00d2      	lsls	r2, r2, #3
 8000abc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	2203      	movs	r2, #3
 8000ace:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	2204      	movs	r2, #4
 8000ad4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	187a      	adds	r2, r7, r1
 8000ad8:	23a0      	movs	r3, #160	; 0xa0
 8000ada:	05db      	lsls	r3, r3, #23
 8000adc:	0011      	movs	r1, r2
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f000 fa46 	bl	8000f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ae4:	e02e      	b.n	8000b44 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a1a      	ldr	r2, [pc, #104]	; (8000b54 <HAL_UART_MspInit+0xe8>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d129      	bne.n	8000b44 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <HAL_UART_MspInit+0xe4>)
 8000af2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_UART_MspInit+0xe4>)
 8000af6:	2180      	movs	r1, #128	; 0x80
 8000af8:	0289      	lsls	r1, r1, #10
 8000afa:	430a      	orrs	r2, r1
 8000afc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <HAL_UART_MspInit+0xe4>)
 8000b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <HAL_UART_MspInit+0xe4>)
 8000b04:	2101      	movs	r1, #1
 8000b06:	430a      	orrs	r2, r1
 8000b08:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_UART_MspInit+0xe4>)
 8000b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4013      	ands	r3, r2
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b16:	2114      	movs	r1, #20
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	2202      	movs	r2, #2
 8000b22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2204      	movs	r2, #4
 8000b34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	187a      	adds	r2, r7, r1
 8000b38:	23a0      	movs	r3, #160	; 0xa0
 8000b3a:	05db      	lsls	r3, r3, #23
 8000b3c:	0011      	movs	r1, r2
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f000 fa16 	bl	8000f70 <HAL_GPIO_Init>
}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	b00a      	add	sp, #40	; 0x28
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40013800 	.word	0x40013800
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40004400 	.word	0x40004400

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <NMI_Handler+0x4>

08000b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <HardFault_Handler+0x4>

08000b64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7c:	f000 f906 	bl	8000d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	60f8      	str	r0, [r7, #12]
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	e00a      	b.n	8000bae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b98:	e000      	b.n	8000b9c <_read+0x16>
 8000b9a:	bf00      	nop
 8000b9c:	0001      	movs	r1, r0
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	1c5a      	adds	r2, r3, #1
 8000ba2:	60ba      	str	r2, [r7, #8]
 8000ba4:	b2ca      	uxtb	r2, r1
 8000ba6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	3301      	adds	r3, #1
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	697a      	ldr	r2, [r7, #20]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	dbf0      	blt.n	8000b98 <_read+0x12>
	}

return len;
 8000bb6:	687b      	ldr	r3, [r7, #4]
}
 8000bb8:	0018      	movs	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b006      	add	sp, #24
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	return -1;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	425b      	negs	r3, r3
}
 8000bcc:	0018      	movs	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b002      	add	sp, #8
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	2280      	movs	r2, #128	; 0x80
 8000be2:	0192      	lsls	r2, r2, #6
 8000be4:	605a      	str	r2, [r3, #4]
	return 0;
 8000be6:	2300      	movs	r3, #0
}
 8000be8:	0018      	movs	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b002      	add	sp, #8
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <_isatty>:

int _isatty(int file)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	return 1;
 8000bf8:	2301      	movs	r3, #1
}
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b002      	add	sp, #8
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b084      	sub	sp, #16
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	60f8      	str	r0, [r7, #12]
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
	return 0;
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	0018      	movs	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b004      	add	sp, #16
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <_sbrk+0x5c>)
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <_sbrk+0x60>)
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <_sbrk+0x64>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <_sbrk+0x68>)
 8000c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	18d3      	adds	r3, r2, r3
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d207      	bcs.n	8000c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c48:	f002 f92e 	bl	8002ea8 <__errno>
 8000c4c:	0003      	movs	r3, r0
 8000c4e:	220c      	movs	r2, #12
 8000c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c52:	2301      	movs	r3, #1
 8000c54:	425b      	negs	r3, r3
 8000c56:	e009      	b.n	8000c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	18d2      	adds	r2, r2, r3
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <_sbrk+0x64>)
 8000c68:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b006      	add	sp, #24
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20002000 	.word	0x20002000
 8000c78:	00000400 	.word	0x00000400
 8000c7c:	2000008c 	.word	0x2000008c
 8000c80:	20000250 	.word	0x20000250

08000c84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c92:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c94:	480d      	ldr	r0, [pc, #52]	; (8000ccc <LoopForever+0x6>)
  ldr r1, =_edata
 8000c96:	490e      	ldr	r1, [pc, #56]	; (8000cd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c98:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <LoopForever+0xe>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000caa:	4a0b      	ldr	r2, [pc, #44]	; (8000cd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cac:	4c0b      	ldr	r4, [pc, #44]	; (8000cdc <LoopForever+0x16>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cba:	f7ff ffe3 	bl	8000c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cbe:	f002 f8f9 	bl	8002eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc2:	f7ff fbe3 	bl	800048c <main>

08000cc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cc6:	e7fe      	b.n	8000cc6 <LoopForever>
   ldr   r0, =_estack
 8000cc8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cd4:	0800396c 	.word	0x0800396c
  ldr r2, =_sbss
 8000cd8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cdc:	2000024c 	.word	0x2000024c

08000ce0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC1_COMP_IRQHandler>
	...

08000ce4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <HAL_Init+0x3c>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <HAL_Init+0x3c>)
 8000cf6:	2140      	movs	r1, #64	; 0x40
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f000 f811 	bl	8000d24 <HAL_InitTick>
 8000d02:	1e03      	subs	r3, r0, #0
 8000d04:	d003      	beq.n	8000d0e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	2201      	movs	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]
 8000d0c:	e001      	b.n	8000d12 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d0e:	f7ff fe11 	bl	8000934 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	781b      	ldrb	r3, [r3, #0]
}
 8000d16:	0018      	movs	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b002      	add	sp, #8
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	40022000 	.word	0x40022000

08000d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <HAL_InitTick+0x5c>)
 8000d2e:	681c      	ldr	r4, [r3, #0]
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <HAL_InitTick+0x60>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	0019      	movs	r1, r3
 8000d36:	23fa      	movs	r3, #250	; 0xfa
 8000d38:	0098      	lsls	r0, r3, #2
 8000d3a:	f7ff f9e5 	bl	8000108 <__udivsi3>
 8000d3e:	0003      	movs	r3, r0
 8000d40:	0019      	movs	r1, r3
 8000d42:	0020      	movs	r0, r4
 8000d44:	f7ff f9e0 	bl	8000108 <__udivsi3>
 8000d48:	0003      	movs	r3, r0
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f000 f903 	bl	8000f56 <HAL_SYSTICK_Config>
 8000d50:	1e03      	subs	r3, r0, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	e00f      	b.n	8000d78 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	d80b      	bhi.n	8000d76 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	2301      	movs	r3, #1
 8000d62:	425b      	negs	r3, r3
 8000d64:	2200      	movs	r2, #0
 8000d66:	0018      	movs	r0, r3
 8000d68:	f000 f8e0 	bl	8000f2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_InitTick+0x64>)
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	e000      	b.n	8000d78 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	0018      	movs	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b003      	add	sp, #12
 8000d7e:	bd90      	pop	{r4, r7, pc}
 8000d80:	20000000 	.word	0x20000000
 8000d84:	20000008 	.word	0x20000008
 8000d88:	20000004 	.word	0x20000004

08000d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <HAL_IncTick+0x1c>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	001a      	movs	r2, r3
 8000d96:	4b05      	ldr	r3, [pc, #20]	; (8000dac <HAL_IncTick+0x20>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	18d2      	adds	r2, r2, r3
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <HAL_IncTick+0x20>)
 8000d9e:	601a      	str	r2, [r3, #0]
}
 8000da0:	46c0      	nop			; (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	20000008 	.word	0x20000008
 8000dac:	20000244 	.word	0x20000244

08000db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  return uwTick;
 8000db4:	4b02      	ldr	r3, [pc, #8]	; (8000dc0 <HAL_GetTick+0x10>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	0018      	movs	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	20000244 	.word	0x20000244

08000dc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dcc:	f7ff fff0 	bl	8000db0 <HAL_GetTick>
 8000dd0:	0003      	movs	r3, r0
 8000dd2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	d005      	beq.n	8000dea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <HAL_Delay+0x40>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	001a      	movs	r2, r3
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	189b      	adds	r3, r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	f7ff ffe0 	bl	8000db0 <HAL_GetTick>
 8000df0:	0002      	movs	r2, r0
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d8f7      	bhi.n	8000dec <HAL_Delay+0x28>
  {
  }
}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b004      	add	sp, #16
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000008 	.word	0x20000008

08000e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	0002      	movs	r2, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	1dfb      	adds	r3, r7, #7
 8000e14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b7f      	cmp	r3, #127	; 0x7f
 8000e1c:	d828      	bhi.n	8000e70 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e1e:	4a2f      	ldr	r2, [pc, #188]	; (8000edc <__NVIC_SetPriority+0xd4>)
 8000e20:	1dfb      	adds	r3, r7, #7
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	b25b      	sxtb	r3, r3
 8000e26:	089b      	lsrs	r3, r3, #2
 8000e28:	33c0      	adds	r3, #192	; 0xc0
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	589b      	ldr	r3, [r3, r2]
 8000e2e:	1dfa      	adds	r2, r7, #7
 8000e30:	7812      	ldrb	r2, [r2, #0]
 8000e32:	0011      	movs	r1, r2
 8000e34:	2203      	movs	r2, #3
 8000e36:	400a      	ands	r2, r1
 8000e38:	00d2      	lsls	r2, r2, #3
 8000e3a:	21ff      	movs	r1, #255	; 0xff
 8000e3c:	4091      	lsls	r1, r2
 8000e3e:	000a      	movs	r2, r1
 8000e40:	43d2      	mvns	r2, r2
 8000e42:	401a      	ands	r2, r3
 8000e44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	019b      	lsls	r3, r3, #6
 8000e4a:	22ff      	movs	r2, #255	; 0xff
 8000e4c:	401a      	ands	r2, r3
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	0018      	movs	r0, r3
 8000e54:	2303      	movs	r3, #3
 8000e56:	4003      	ands	r3, r0
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e5c:	481f      	ldr	r0, [pc, #124]	; (8000edc <__NVIC_SetPriority+0xd4>)
 8000e5e:	1dfb      	adds	r3, r7, #7
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	089b      	lsrs	r3, r3, #2
 8000e66:	430a      	orrs	r2, r1
 8000e68:	33c0      	adds	r3, #192	; 0xc0
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e6e:	e031      	b.n	8000ed4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e70:	4a1b      	ldr	r2, [pc, #108]	; (8000ee0 <__NVIC_SetPriority+0xd8>)
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	0019      	movs	r1, r3
 8000e78:	230f      	movs	r3, #15
 8000e7a:	400b      	ands	r3, r1
 8000e7c:	3b08      	subs	r3, #8
 8000e7e:	089b      	lsrs	r3, r3, #2
 8000e80:	3306      	adds	r3, #6
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	18d3      	adds	r3, r2, r3
 8000e86:	3304      	adds	r3, #4
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	1dfa      	adds	r2, r7, #7
 8000e8c:	7812      	ldrb	r2, [r2, #0]
 8000e8e:	0011      	movs	r1, r2
 8000e90:	2203      	movs	r2, #3
 8000e92:	400a      	ands	r2, r1
 8000e94:	00d2      	lsls	r2, r2, #3
 8000e96:	21ff      	movs	r1, #255	; 0xff
 8000e98:	4091      	lsls	r1, r2
 8000e9a:	000a      	movs	r2, r1
 8000e9c:	43d2      	mvns	r2, r2
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	019b      	lsls	r3, r3, #6
 8000ea6:	22ff      	movs	r2, #255	; 0xff
 8000ea8:	401a      	ands	r2, r3
 8000eaa:	1dfb      	adds	r3, r7, #7
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	0018      	movs	r0, r3
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	4003      	ands	r3, r0
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eb8:	4809      	ldr	r0, [pc, #36]	; (8000ee0 <__NVIC_SetPriority+0xd8>)
 8000eba:	1dfb      	adds	r3, r7, #7
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	001c      	movs	r4, r3
 8000ec0:	230f      	movs	r3, #15
 8000ec2:	4023      	ands	r3, r4
 8000ec4:	3b08      	subs	r3, #8
 8000ec6:	089b      	lsrs	r3, r3, #2
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	3306      	adds	r3, #6
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	18c3      	adds	r3, r0, r3
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	601a      	str	r2, [r3, #0]
}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b003      	add	sp, #12
 8000eda:	bd90      	pop	{r4, r7, pc}
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	4a0c      	ldr	r2, [pc, #48]	; (8000f24 <SysTick_Config+0x40>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d901      	bls.n	8000efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e010      	b.n	8000f1c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <SysTick_Config+0x44>)
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	3a01      	subs	r2, #1
 8000f00:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f02:	2301      	movs	r3, #1
 8000f04:	425b      	negs	r3, r3
 8000f06:	2103      	movs	r1, #3
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f7ff ff7d 	bl	8000e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <SysTick_Config+0x44>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <SysTick_Config+0x44>)
 8000f16:	2207      	movs	r2, #7
 8000f18:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b002      	add	sp, #8
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	00ffffff 	.word	0x00ffffff
 8000f28:	e000e010 	.word	0xe000e010

08000f2c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	210f      	movs	r1, #15
 8000f38:	187b      	adds	r3, r7, r1
 8000f3a:	1c02      	adds	r2, r0, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b25b      	sxtb	r3, r3
 8000f46:	0011      	movs	r1, r2
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f7ff ff5d 	bl	8000e08 <__NVIC_SetPriority>
}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b004      	add	sp, #16
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	0018      	movs	r0, r3
 8000f62:	f7ff ffbf 	bl	8000ee4 <SysTick_Config>
 8000f66:	0003      	movs	r3, r0
}
 8000f68:	0018      	movs	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b002      	add	sp, #8
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f86:	e14f      	b.n	8001228 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	4091      	lsls	r1, r2
 8000f92:	000a      	movs	r2, r1
 8000f94:	4013      	ands	r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d100      	bne.n	8000fa0 <HAL_GPIO_Init+0x30>
 8000f9e:	e140      	b.n	8001222 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d00b      	beq.n	8000fc0 <HAL_GPIO_Init+0x50>
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d007      	beq.n	8000fc0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fb4:	2b11      	cmp	r3, #17
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b12      	cmp	r3, #18
 8000fbe:	d130      	bne.n	8001022 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	409a      	lsls	r2, r3
 8000fce:	0013      	movs	r3, r2
 8000fd0:	43da      	mvns	r2, r3
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	409a      	lsls	r2, r3
 8000fe2:	0013      	movs	r3, r2
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	0013      	movs	r3, r2
 8000ffe:	43da      	mvns	r2, r3
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	091b      	lsrs	r3, r3, #4
 800100c:	2201      	movs	r2, #1
 800100e:	401a      	ands	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	409a      	lsls	r2, r3
 8001014:	0013      	movs	r3, r2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	2203      	movs	r2, #3
 800102e:	409a      	lsls	r2, r3
 8001030:	0013      	movs	r3, r2
 8001032:	43da      	mvns	r2, r3
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	409a      	lsls	r2, r3
 8001044:	0013      	movs	r3, r2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b02      	cmp	r3, #2
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0xf2>
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b12      	cmp	r3, #18
 8001060:	d123      	bne.n	80010aa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	08da      	lsrs	r2, r3, #3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3208      	adds	r2, #8
 800106a:	0092      	lsls	r2, r2, #2
 800106c:	58d3      	ldr	r3, [r2, r3]
 800106e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	2207      	movs	r2, #7
 8001074:	4013      	ands	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	220f      	movs	r2, #15
 800107a:	409a      	lsls	r2, r3
 800107c:	0013      	movs	r3, r2
 800107e:	43da      	mvns	r2, r3
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	691a      	ldr	r2, [r3, #16]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	2107      	movs	r1, #7
 800108e:	400b      	ands	r3, r1
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	409a      	lsls	r2, r3
 8001094:	0013      	movs	r3, r2
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	08da      	lsrs	r2, r3, #3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3208      	adds	r2, #8
 80010a4:	0092      	lsls	r2, r2, #2
 80010a6:	6939      	ldr	r1, [r7, #16]
 80010a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	2203      	movs	r2, #3
 80010b6:	409a      	lsls	r2, r3
 80010b8:	0013      	movs	r3, r2
 80010ba:	43da      	mvns	r2, r3
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2203      	movs	r2, #3
 80010c8:	401a      	ands	r2, r3
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	409a      	lsls	r2, r3
 80010d0:	0013      	movs	r3, r2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	055b      	lsls	r3, r3, #21
 80010e6:	4013      	ands	r3, r2
 80010e8:	d100      	bne.n	80010ec <HAL_GPIO_Init+0x17c>
 80010ea:	e09a      	b.n	8001222 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ec:	4b54      	ldr	r3, [pc, #336]	; (8001240 <HAL_GPIO_Init+0x2d0>)
 80010ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010f0:	4b53      	ldr	r3, [pc, #332]	; (8001240 <HAL_GPIO_Init+0x2d0>)
 80010f2:	2101      	movs	r1, #1
 80010f4:	430a      	orrs	r2, r1
 80010f6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80010f8:	4a52      	ldr	r2, [pc, #328]	; (8001244 <HAL_GPIO_Init+0x2d4>)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	3302      	adds	r3, #2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	589b      	ldr	r3, [r3, r2]
 8001104:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	2203      	movs	r2, #3
 800110a:	4013      	ands	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	220f      	movs	r2, #15
 8001110:	409a      	lsls	r2, r3
 8001112:	0013      	movs	r3, r2
 8001114:	43da      	mvns	r2, r3
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	23a0      	movs	r3, #160	; 0xa0
 8001120:	05db      	lsls	r3, r3, #23
 8001122:	429a      	cmp	r2, r3
 8001124:	d019      	beq.n	800115a <HAL_GPIO_Init+0x1ea>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a47      	ldr	r2, [pc, #284]	; (8001248 <HAL_GPIO_Init+0x2d8>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d013      	beq.n	8001156 <HAL_GPIO_Init+0x1e6>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a46      	ldr	r2, [pc, #280]	; (800124c <HAL_GPIO_Init+0x2dc>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d00d      	beq.n	8001152 <HAL_GPIO_Init+0x1e2>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a45      	ldr	r2, [pc, #276]	; (8001250 <HAL_GPIO_Init+0x2e0>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d007      	beq.n	800114e <HAL_GPIO_Init+0x1de>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a44      	ldr	r2, [pc, #272]	; (8001254 <HAL_GPIO_Init+0x2e4>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d101      	bne.n	800114a <HAL_GPIO_Init+0x1da>
 8001146:	2305      	movs	r3, #5
 8001148:	e008      	b.n	800115c <HAL_GPIO_Init+0x1ec>
 800114a:	2306      	movs	r3, #6
 800114c:	e006      	b.n	800115c <HAL_GPIO_Init+0x1ec>
 800114e:	2303      	movs	r3, #3
 8001150:	e004      	b.n	800115c <HAL_GPIO_Init+0x1ec>
 8001152:	2302      	movs	r3, #2
 8001154:	e002      	b.n	800115c <HAL_GPIO_Init+0x1ec>
 8001156:	2301      	movs	r3, #1
 8001158:	e000      	b.n	800115c <HAL_GPIO_Init+0x1ec>
 800115a:	2300      	movs	r3, #0
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	2103      	movs	r1, #3
 8001160:	400a      	ands	r2, r1
 8001162:	0092      	lsls	r2, r2, #2
 8001164:	4093      	lsls	r3, r2
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800116c:	4935      	ldr	r1, [pc, #212]	; (8001244 <HAL_GPIO_Init+0x2d4>)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	089b      	lsrs	r3, r3, #2
 8001172:	3302      	adds	r3, #2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800117a:	4b37      	ldr	r3, [pc, #220]	; (8001258 <HAL_GPIO_Init+0x2e8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	43da      	mvns	r2, r3
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	2380      	movs	r3, #128	; 0x80
 8001190:	025b      	lsls	r3, r3, #9
 8001192:	4013      	ands	r3, r2
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4313      	orrs	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800119e:	4b2e      	ldr	r3, [pc, #184]	; (8001258 <HAL_GPIO_Init+0x2e8>)
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80011a4:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <HAL_GPIO_Init+0x2e8>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	43da      	mvns	r2, r3
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	029b      	lsls	r3, r3, #10
 80011bc:	4013      	ands	r3, r2
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011c8:	4b23      	ldr	r3, [pc, #140]	; (8001258 <HAL_GPIO_Init+0x2e8>)
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ce:	4b22      	ldr	r3, [pc, #136]	; (8001258 <HAL_GPIO_Init+0x2e8>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	43da      	mvns	r2, r3
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	2380      	movs	r3, #128	; 0x80
 80011e4:	035b      	lsls	r3, r3, #13
 80011e6:	4013      	ands	r3, r2
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <HAL_GPIO_Init+0x2e8>)
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011f8:	4b17      	ldr	r3, [pc, #92]	; (8001258 <HAL_GPIO_Init+0x2e8>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	43da      	mvns	r2, r3
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	2380      	movs	r3, #128	; 0x80
 800120e:	039b      	lsls	r3, r3, #14
 8001210:	4013      	ands	r3, r2
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_GPIO_Init+0x2e8>)
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	3301      	adds	r3, #1
 8001226:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	40da      	lsrs	r2, r3
 8001230:	1e13      	subs	r3, r2, #0
 8001232:	d000      	beq.n	8001236 <HAL_GPIO_Init+0x2c6>
 8001234:	e6a8      	b.n	8000f88 <HAL_GPIO_Init+0x18>
  }
}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	46bd      	mov	sp, r7
 800123a:	b006      	add	sp, #24
 800123c:	bd80      	pop	{r7, pc}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	40021000 	.word	0x40021000
 8001244:	40010000 	.word	0x40010000
 8001248:	50000400 	.word	0x50000400
 800124c:	50000800 	.word	0x50000800
 8001250:	50000c00 	.word	0x50000c00
 8001254:	50001c00 	.word	0x50001c00
 8001258:	40010400 	.word	0x40010400

0800125c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	0008      	movs	r0, r1
 8001266:	0011      	movs	r1, r2
 8001268:	1cbb      	adds	r3, r7, #2
 800126a:	1c02      	adds	r2, r0, #0
 800126c:	801a      	strh	r2, [r3, #0]
 800126e:	1c7b      	adds	r3, r7, #1
 8001270:	1c0a      	adds	r2, r1, #0
 8001272:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001274:	1c7b      	adds	r3, r7, #1
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d004      	beq.n	8001286 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800127c:	1cbb      	adds	r3, r7, #2
 800127e:	881a      	ldrh	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001284:	e003      	b.n	800128e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001286:	1cbb      	adds	r3, r7, #2
 8001288:	881a      	ldrh	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	46bd      	mov	sp, r7
 8001292:	b002      	add	sp, #8
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e082      	b.n	80013b0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2241      	movs	r2, #65	; 0x41
 80012ae:	5c9b      	ldrb	r3, [r3, r2]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d107      	bne.n	80012c6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2240      	movs	r2, #64	; 0x40
 80012ba:	2100      	movs	r1, #0
 80012bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	0018      	movs	r0, r3
 80012c2:	f7ff fb4b 	bl	800095c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2241      	movs	r2, #65	; 0x41
 80012ca:	2124      	movs	r1, #36	; 0x24
 80012cc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2101      	movs	r1, #1
 80012da:	438a      	bics	r2, r1
 80012dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4934      	ldr	r1, [pc, #208]	; (80013b8 <HAL_I2C_Init+0x120>)
 80012e8:	400a      	ands	r2, r1
 80012ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4931      	ldr	r1, [pc, #196]	; (80013bc <HAL_I2C_Init+0x124>)
 80012f8:	400a      	ands	r2, r1
 80012fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d108      	bne.n	8001316 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	0209      	lsls	r1, r1, #8
 8001310:	430a      	orrs	r2, r1
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	e007      	b.n	8001326 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2184      	movs	r1, #132	; 0x84
 8001320:	0209      	lsls	r1, r1, #8
 8001322:	430a      	orrs	r2, r1
 8001324:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d104      	bne.n	8001338 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2280      	movs	r2, #128	; 0x80
 8001334:	0112      	lsls	r2, r2, #4
 8001336:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	491f      	ldr	r1, [pc, #124]	; (80013c0 <HAL_I2C_Init+0x128>)
 8001344:	430a      	orrs	r2, r1
 8001346:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	491a      	ldr	r1, [pc, #104]	; (80013bc <HAL_I2C_Init+0x124>)
 8001354:	400a      	ands	r2, r1
 8001356:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691a      	ldr	r2, [r3, #16]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	431a      	orrs	r2, r3
 8001362:	0011      	movs	r1, r2
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	021a      	lsls	r2, r3, #8
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69d9      	ldr	r1, [r3, #28]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a1a      	ldr	r2, [r3, #32]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	430a      	orrs	r2, r1
 8001380:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2101      	movs	r1, #1
 800138e:	430a      	orrs	r2, r1
 8001390:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2241      	movs	r2, #65	; 0x41
 800139c:	2120      	movs	r1, #32
 800139e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2242      	movs	r2, #66	; 0x42
 80013aa:	2100      	movs	r1, #0
 80013ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	0018      	movs	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	b002      	add	sp, #8
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	f0ffffff 	.word	0xf0ffffff
 80013bc:	ffff7fff 	.word	0xffff7fff
 80013c0:	02008000 	.word	0x02008000

080013c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2241      	movs	r2, #65	; 0x41
 80013d2:	5c9b      	ldrb	r3, [r3, r2]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b20      	cmp	r3, #32
 80013d8:	d138      	bne.n	800144c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2240      	movs	r2, #64	; 0x40
 80013de:	5c9b      	ldrb	r3, [r3, r2]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d101      	bne.n	80013e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80013e4:	2302      	movs	r3, #2
 80013e6:	e032      	b.n	800144e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2240      	movs	r2, #64	; 0x40
 80013ec:	2101      	movs	r1, #1
 80013ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2241      	movs	r2, #65	; 0x41
 80013f4:	2124      	movs	r1, #36	; 0x24
 80013f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2101      	movs	r1, #1
 8001404:	438a      	bics	r2, r1
 8001406:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4911      	ldr	r1, [pc, #68]	; (8001458 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001414:	400a      	ands	r2, r1
 8001416:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6819      	ldr	r1, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2101      	movs	r1, #1
 8001434:	430a      	orrs	r2, r1
 8001436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2241      	movs	r2, #65	; 0x41
 800143c:	2120      	movs	r1, #32
 800143e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2240      	movs	r2, #64	; 0x40
 8001444:	2100      	movs	r1, #0
 8001446:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	e000      	b.n	800144e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800144c:	2302      	movs	r3, #2
  }
}
 800144e:	0018      	movs	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	b002      	add	sp, #8
 8001454:	bd80      	pop	{r7, pc}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	ffffefff 	.word	0xffffefff

0800145c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2241      	movs	r2, #65	; 0x41
 800146a:	5c9b      	ldrb	r3, [r3, r2]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b20      	cmp	r3, #32
 8001470:	d139      	bne.n	80014e6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2240      	movs	r2, #64	; 0x40
 8001476:	5c9b      	ldrb	r3, [r3, r2]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d101      	bne.n	8001480 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800147c:	2302      	movs	r3, #2
 800147e:	e033      	b.n	80014e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2240      	movs	r2, #64	; 0x40
 8001484:	2101      	movs	r1, #1
 8001486:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2241      	movs	r2, #65	; 0x41
 800148c:	2124      	movs	r1, #36	; 0x24
 800148e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2101      	movs	r1, #1
 800149c:	438a      	bics	r2, r1
 800149e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4a11      	ldr	r2, [pc, #68]	; (80014f0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	68fa      	ldr	r2, [r7, #12]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2101      	movs	r1, #1
 80014ce:	430a      	orrs	r2, r1
 80014d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2241      	movs	r2, #65	; 0x41
 80014d6:	2120      	movs	r1, #32
 80014d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2240      	movs	r2, #64	; 0x40
 80014de:	2100      	movs	r1, #0
 80014e0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	e000      	b.n	80014e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80014e6:	2302      	movs	r3, #2
  }
}
 80014e8:	0018      	movs	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b004      	add	sp, #16
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	fffff0ff 	.word	0xfffff0ff

080014f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f4:	b5b0      	push	{r4, r5, r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d102      	bne.n	8001508 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	f000 fbb4 	bl	8001c70 <HAL_RCC_OscConfig+0x77c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001508:	4bc3      	ldr	r3, [pc, #780]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	220c      	movs	r2, #12
 800150e:	4013      	ands	r3, r2
 8001510:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001512:	4bc1      	ldr	r3, [pc, #772]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 8001514:	68da      	ldr	r2, [r3, #12]
 8001516:	2380      	movs	r3, #128	; 0x80
 8001518:	025b      	lsls	r3, r3, #9
 800151a:	4013      	ands	r3, r2
 800151c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2201      	movs	r2, #1
 8001524:	4013      	ands	r3, r2
 8001526:	d100      	bne.n	800152a <HAL_RCC_OscConfig+0x36>
 8001528:	e07e      	b.n	8001628 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800152a:	6a3b      	ldr	r3, [r7, #32]
 800152c:	2b08      	cmp	r3, #8
 800152e:	d007      	beq.n	8001540 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001530:	6a3b      	ldr	r3, [r7, #32]
 8001532:	2b0c      	cmp	r3, #12
 8001534:	d112      	bne.n	800155c <HAL_RCC_OscConfig+0x68>
 8001536:	69fa      	ldr	r2, [r7, #28]
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	025b      	lsls	r3, r3, #9
 800153c:	429a      	cmp	r2, r3
 800153e:	d10d      	bne.n	800155c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001540:	4bb5      	ldr	r3, [pc, #724]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	029b      	lsls	r3, r3, #10
 8001548:	4013      	ands	r3, r2
 800154a:	d100      	bne.n	800154e <HAL_RCC_OscConfig+0x5a>
 800154c:	e06b      	b.n	8001626 <HAL_RCC_OscConfig+0x132>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d167      	bne.n	8001626 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	f000 fb8a 	bl	8001c70 <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	025b      	lsls	r3, r3, #9
 8001564:	429a      	cmp	r2, r3
 8001566:	d107      	bne.n	8001578 <HAL_RCC_OscConfig+0x84>
 8001568:	4bab      	ldr	r3, [pc, #684]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4baa      	ldr	r3, [pc, #680]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 800156e:	2180      	movs	r1, #128	; 0x80
 8001570:	0249      	lsls	r1, r1, #9
 8001572:	430a      	orrs	r2, r1
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	e027      	b.n	80015c8 <HAL_RCC_OscConfig+0xd4>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	23a0      	movs	r3, #160	; 0xa0
 800157e:	02db      	lsls	r3, r3, #11
 8001580:	429a      	cmp	r2, r3
 8001582:	d10e      	bne.n	80015a2 <HAL_RCC_OscConfig+0xae>
 8001584:	4ba4      	ldr	r3, [pc, #656]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4ba3      	ldr	r3, [pc, #652]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 800158a:	2180      	movs	r1, #128	; 0x80
 800158c:	02c9      	lsls	r1, r1, #11
 800158e:	430a      	orrs	r2, r1
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	4ba1      	ldr	r3, [pc, #644]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	4ba0      	ldr	r3, [pc, #640]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 8001598:	2180      	movs	r1, #128	; 0x80
 800159a:	0249      	lsls	r1, r1, #9
 800159c:	430a      	orrs	r2, r1
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	e012      	b.n	80015c8 <HAL_RCC_OscConfig+0xd4>
 80015a2:	4b9d      	ldr	r3, [pc, #628]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	4b9c      	ldr	r3, [pc, #624]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 80015a8:	499c      	ldr	r1, [pc, #624]	; (800181c <HAL_RCC_OscConfig+0x328>)
 80015aa:	400a      	ands	r2, r1
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	4b9a      	ldr	r3, [pc, #616]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	025b      	lsls	r3, r3, #9
 80015b6:	4013      	ands	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4b96      	ldr	r3, [pc, #600]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b95      	ldr	r3, [pc, #596]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 80015c2:	4997      	ldr	r1, [pc, #604]	; (8001820 <HAL_RCC_OscConfig+0x32c>)
 80015c4:	400a      	ands	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d015      	beq.n	80015fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff fbee 	bl	8000db0 <HAL_GetTick>
 80015d4:	0003      	movs	r3, r0
 80015d6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015d8:	e009      	b.n	80015ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015da:	f7ff fbe9 	bl	8000db0 <HAL_GetTick>
 80015de:	0002      	movs	r2, r0
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b64      	cmp	r3, #100	; 0x64
 80015e6:	d902      	bls.n	80015ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	f000 fb41 	bl	8001c70 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015ee:	4b8a      	ldr	r3, [pc, #552]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	029b      	lsls	r3, r3, #10
 80015f6:	4013      	ands	r3, r2
 80015f8:	d0ef      	beq.n	80015da <HAL_RCC_OscConfig+0xe6>
 80015fa:	e015      	b.n	8001628 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fc:	f7ff fbd8 	bl	8000db0 <HAL_GetTick>
 8001600:	0003      	movs	r3, r0
 8001602:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001606:	f7ff fbd3 	bl	8000db0 <HAL_GetTick>
 800160a:	0002      	movs	r2, r0
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b64      	cmp	r3, #100	; 0x64
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e32b      	b.n	8001c70 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001618:	4b7f      	ldr	r3, [pc, #508]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	029b      	lsls	r3, r3, #10
 8001620:	4013      	ands	r3, r2
 8001622:	d1f0      	bne.n	8001606 <HAL_RCC_OscConfig+0x112>
 8001624:	e000      	b.n	8001628 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001626:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2202      	movs	r2, #2
 800162e:	4013      	ands	r3, r2
 8001630:	d100      	bne.n	8001634 <HAL_RCC_OscConfig+0x140>
 8001632:	e08c      	b.n	800174e <HAL_RCC_OscConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	2b04      	cmp	r3, #4
 800163e:	d005      	beq.n	800164c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	2b0c      	cmp	r3, #12
 8001644:	d13f      	bne.n	80016c6 <HAL_RCC_OscConfig+0x1d2>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d13c      	bne.n	80016c6 <HAL_RCC_OscConfig+0x1d2>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800164c:	4b72      	ldr	r3, [pc, #456]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2204      	movs	r2, #4
 8001652:	4013      	ands	r3, r2
 8001654:	d004      	beq.n	8001660 <HAL_RCC_OscConfig+0x16c>
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e307      	b.n	8001c70 <HAL_RCC_OscConfig+0x77c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001660:	4b6d      	ldr	r3, [pc, #436]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	4a6f      	ldr	r2, [pc, #444]	; (8001824 <HAL_RCC_OscConfig+0x330>)
 8001666:	4013      	ands	r3, r2
 8001668:	0019      	movs	r1, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	021a      	lsls	r2, r3, #8
 8001670:	4b69      	ldr	r3, [pc, #420]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 8001672:	430a      	orrs	r2, r1
 8001674:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001676:	4b68      	ldr	r3, [pc, #416]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2209      	movs	r2, #9
 800167c:	4393      	bics	r3, r2
 800167e:	0019      	movs	r1, r3
 8001680:	4b65      	ldr	r3, [pc, #404]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	430a      	orrs	r2, r1
 8001686:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001688:	f000 fc44 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 800168c:	0001      	movs	r1, r0
 800168e:	4b62      	ldr	r3, [pc, #392]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	091b      	lsrs	r3, r3, #4
 8001694:	220f      	movs	r2, #15
 8001696:	4013      	ands	r3, r2
 8001698:	4a63      	ldr	r2, [pc, #396]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 800169a:	5cd3      	ldrb	r3, [r2, r3]
 800169c:	000a      	movs	r2, r1
 800169e:	40da      	lsrs	r2, r3
 80016a0:	4b62      	ldr	r3, [pc, #392]	; (800182c <HAL_RCC_OscConfig+0x338>)
 80016a2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80016a4:	4b62      	ldr	r3, [pc, #392]	; (8001830 <HAL_RCC_OscConfig+0x33c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2513      	movs	r5, #19
 80016aa:	197c      	adds	r4, r7, r5
 80016ac:	0018      	movs	r0, r3
 80016ae:	f7ff fb39 	bl	8000d24 <HAL_InitTick>
 80016b2:	0003      	movs	r3, r0
 80016b4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80016b6:	197b      	adds	r3, r7, r5
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d047      	beq.n	800174e <HAL_RCC_OscConfig+0x25a>
      {
        return status;
 80016be:	2313      	movs	r3, #19
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	e2d4      	b.n	8001c70 <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d027      	beq.n	800171c <HAL_RCC_OscConfig+0x228>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80016cc:	4b52      	ldr	r3, [pc, #328]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2209      	movs	r2, #9
 80016d2:	4393      	bics	r3, r2
 80016d4:	0019      	movs	r1, r3
 80016d6:	4b50      	ldr	r3, [pc, #320]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	430a      	orrs	r2, r1
 80016dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016de:	f7ff fb67 	bl	8000db0 <HAL_GetTick>
 80016e2:	0003      	movs	r3, r0
 80016e4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016e8:	f7ff fb62 	bl	8000db0 <HAL_GetTick>
 80016ec:	0002      	movs	r2, r0
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e2ba      	b.n	8001c70 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016fa:	4b47      	ldr	r3, [pc, #284]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2204      	movs	r2, #4
 8001700:	4013      	ands	r3, r2
 8001702:	d0f1      	beq.n	80016e8 <HAL_RCC_OscConfig+0x1f4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001704:	4b44      	ldr	r3, [pc, #272]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	4a46      	ldr	r2, [pc, #280]	; (8001824 <HAL_RCC_OscConfig+0x330>)
 800170a:	4013      	ands	r3, r2
 800170c:	0019      	movs	r1, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	021a      	lsls	r2, r3, #8
 8001714:	4b40      	ldr	r3, [pc, #256]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 8001716:	430a      	orrs	r2, r1
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	e018      	b.n	800174e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800171c:	4b3e      	ldr	r3, [pc, #248]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b3d      	ldr	r3, [pc, #244]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 8001722:	2101      	movs	r1, #1
 8001724:	438a      	bics	r2, r1
 8001726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001728:	f7ff fb42 	bl	8000db0 <HAL_GetTick>
 800172c:	0003      	movs	r3, r0
 800172e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x250>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001732:	f7ff fb3d 	bl	8000db0 <HAL_GetTick>
 8001736:	0002      	movs	r2, r0
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e295      	b.n	8001c70 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001744:	4b34      	ldr	r3, [pc, #208]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2204      	movs	r2, #4
 800174a:	4013      	ands	r3, r2
 800174c:	d1f1      	bne.n	8001732 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2210      	movs	r2, #16
 8001754:	4013      	ands	r3, r2
 8001756:	d100      	bne.n	800175a <HAL_RCC_OscConfig+0x266>
 8001758:	e0a3      	b.n	80018a2 <HAL_RCC_OscConfig+0x3ae>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d141      	bne.n	80017e4 <HAL_RCC_OscConfig+0x2f0>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001760:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4013      	ands	r3, r2
 800176a:	d005      	beq.n	8001778 <HAL_RCC_OscConfig+0x284>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_RCC_OscConfig+0x284>
      {
        return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e27b      	b.n	8001c70 <HAL_RCC_OscConfig+0x77c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001778:	4b27      	ldr	r3, [pc, #156]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	4a2d      	ldr	r2, [pc, #180]	; (8001834 <HAL_RCC_OscConfig+0x340>)
 800177e:	4013      	ands	r3, r2
 8001780:	0019      	movs	r1, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001786:	4b24      	ldr	r3, [pc, #144]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 8001788:	430a      	orrs	r2, r1
 800178a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800178c:	4b22      	ldr	r3, [pc, #136]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	0a19      	lsrs	r1, r3, #8
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	061a      	lsls	r2, r3, #24
 800179a:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 800179c:	430a      	orrs	r2, r1
 800179e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	0b5b      	lsrs	r3, r3, #13
 80017a6:	3301      	adds	r3, #1
 80017a8:	2280      	movs	r2, #128	; 0x80
 80017aa:	0212      	lsls	r2, r2, #8
 80017ac:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80017ae:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	091b      	lsrs	r3, r3, #4
 80017b4:	210f      	movs	r1, #15
 80017b6:	400b      	ands	r3, r1
 80017b8:	491b      	ldr	r1, [pc, #108]	; (8001828 <HAL_RCC_OscConfig+0x334>)
 80017ba:	5ccb      	ldrb	r3, [r1, r3]
 80017bc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80017be:	4b1b      	ldr	r3, [pc, #108]	; (800182c <HAL_RCC_OscConfig+0x338>)
 80017c0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80017c2:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <HAL_RCC_OscConfig+0x33c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2513      	movs	r5, #19
 80017c8:	197c      	adds	r4, r7, r5
 80017ca:	0018      	movs	r0, r3
 80017cc:	f7ff faaa 	bl	8000d24 <HAL_InitTick>
 80017d0:	0003      	movs	r3, r0
 80017d2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80017d4:	197b      	adds	r3, r7, r5
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d062      	beq.n	80018a2 <HAL_RCC_OscConfig+0x3ae>
        {
          return status;
 80017dc:	2313      	movs	r3, #19
 80017de:	18fb      	adds	r3, r7, r3
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	e245      	b.n	8001c70 <HAL_RCC_OscConfig+0x77c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	69db      	ldr	r3, [r3, #28]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d040      	beq.n	800186e <HAL_RCC_OscConfig+0x37a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017ec:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 80017f2:	2180      	movs	r1, #128	; 0x80
 80017f4:	0049      	lsls	r1, r1, #1
 80017f6:	430a      	orrs	r2, r1
 80017f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fa:	f7ff fad9 	bl	8000db0 <HAL_GetTick>
 80017fe:	0003      	movs	r3, r0
 8001800:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001802:	e019      	b.n	8001838 <HAL_RCC_OscConfig+0x344>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001804:	f7ff fad4 	bl	8000db0 <HAL_GetTick>
 8001808:	0002      	movs	r2, r0
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d912      	bls.n	8001838 <HAL_RCC_OscConfig+0x344>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e22c      	b.n	8001c70 <HAL_RCC_OscConfig+0x77c>
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	40021000 	.word	0x40021000
 800181c:	fffeffff 	.word	0xfffeffff
 8001820:	fffbffff 	.word	0xfffbffff
 8001824:	ffffe0ff 	.word	0xffffe0ff
 8001828:	0800388c 	.word	0x0800388c
 800182c:	20000000 	.word	0x20000000
 8001830:	20000004 	.word	0x20000004
 8001834:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001838:	4bc6      	ldr	r3, [pc, #792]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4013      	ands	r3, r2
 8001842:	d0df      	beq.n	8001804 <HAL_RCC_OscConfig+0x310>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001844:	4bc3      	ldr	r3, [pc, #780]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4ac3      	ldr	r2, [pc, #780]	; (8001b58 <HAL_RCC_OscConfig+0x664>)
 800184a:	4013      	ands	r3, r2
 800184c:	0019      	movs	r1, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001852:	4bc0      	ldr	r3, [pc, #768]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 8001854:	430a      	orrs	r2, r1
 8001856:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001858:	4bbe      	ldr	r3, [pc, #760]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	021b      	lsls	r3, r3, #8
 800185e:	0a19      	lsrs	r1, r3, #8
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	061a      	lsls	r2, r3, #24
 8001866:	4bbb      	ldr	r3, [pc, #748]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 8001868:	430a      	orrs	r2, r1
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	e019      	b.n	80018a2 <HAL_RCC_OscConfig+0x3ae>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800186e:	4bb9      	ldr	r3, [pc, #740]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4bb8      	ldr	r3, [pc, #736]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 8001874:	49b9      	ldr	r1, [pc, #740]	; (8001b5c <HAL_RCC_OscConfig+0x668>)
 8001876:	400a      	ands	r2, r1
 8001878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187a:	f7ff fa99 	bl	8000db0 <HAL_GetTick>
 800187e:	0003      	movs	r3, r0
 8001880:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001884:	f7ff fa94 	bl	8000db0 <HAL_GetTick>
 8001888:	0002      	movs	r2, r0
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e1ec      	b.n	8001c70 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001896:	4baf      	ldr	r3, [pc, #700]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4013      	ands	r3, r2
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x390>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2208      	movs	r2, #8
 80018a8:	4013      	ands	r3, r2
 80018aa:	d036      	beq.n	800191a <HAL_RCC_OscConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d019      	beq.n	80018e8 <HAL_RCC_OscConfig+0x3f4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b4:	4ba7      	ldr	r3, [pc, #668]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 80018b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018b8:	4ba6      	ldr	r3, [pc, #664]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 80018ba:	2101      	movs	r1, #1
 80018bc:	430a      	orrs	r2, r1
 80018be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c0:	f7ff fa76 	bl	8000db0 <HAL_GetTick>
 80018c4:	0003      	movs	r3, r0
 80018c6:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ca:	f7ff fa71 	bl	8000db0 <HAL_GetTick>
 80018ce:	0002      	movs	r2, r0
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e1c9      	b.n	8001c70 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018dc:	4b9d      	ldr	r3, [pc, #628]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 80018de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e0:	2202      	movs	r2, #2
 80018e2:	4013      	ands	r3, r2
 80018e4:	d0f1      	beq.n	80018ca <HAL_RCC_OscConfig+0x3d6>
 80018e6:	e018      	b.n	800191a <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e8:	4b9a      	ldr	r3, [pc, #616]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 80018ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018ec:	4b99      	ldr	r3, [pc, #612]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 80018ee:	2101      	movs	r1, #1
 80018f0:	438a      	bics	r2, r1
 80018f2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f4:	f7ff fa5c 	bl	8000db0 <HAL_GetTick>
 80018f8:	0003      	movs	r3, r0
 80018fa:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018fe:	f7ff fa57 	bl	8000db0 <HAL_GetTick>
 8001902:	0002      	movs	r2, r0
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e1af      	b.n	8001c70 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001910:	4b90      	ldr	r3, [pc, #576]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 8001912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001914:	2202      	movs	r2, #2
 8001916:	4013      	ands	r3, r2
 8001918:	d1f1      	bne.n	80018fe <HAL_RCC_OscConfig+0x40a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2204      	movs	r2, #4
 8001920:	4013      	ands	r3, r2
 8001922:	d100      	bne.n	8001926 <HAL_RCC_OscConfig+0x432>
 8001924:	e0af      	b.n	8001a86 <HAL_RCC_OscConfig+0x592>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001926:	2327      	movs	r3, #39	; 0x27
 8001928:	18fb      	adds	r3, r7, r3
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800192e:	4b89      	ldr	r3, [pc, #548]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 8001930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001932:	2380      	movs	r3, #128	; 0x80
 8001934:	055b      	lsls	r3, r3, #21
 8001936:	4013      	ands	r3, r2
 8001938:	d10a      	bne.n	8001950 <HAL_RCC_OscConfig+0x45c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	4b86      	ldr	r3, [pc, #536]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 800193c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800193e:	4b85      	ldr	r3, [pc, #532]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 8001940:	2180      	movs	r1, #128	; 0x80
 8001942:	0549      	lsls	r1, r1, #21
 8001944:	430a      	orrs	r2, r1
 8001946:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001948:	2327      	movs	r3, #39	; 0x27
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	2201      	movs	r2, #1
 800194e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001950:	4b83      	ldr	r3, [pc, #524]	; (8001b60 <HAL_RCC_OscConfig+0x66c>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4013      	ands	r3, r2
 800195a:	d11a      	bne.n	8001992 <HAL_RCC_OscConfig+0x49e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800195c:	4b80      	ldr	r3, [pc, #512]	; (8001b60 <HAL_RCC_OscConfig+0x66c>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b7f      	ldr	r3, [pc, #508]	; (8001b60 <HAL_RCC_OscConfig+0x66c>)
 8001962:	2180      	movs	r1, #128	; 0x80
 8001964:	0049      	lsls	r1, r1, #1
 8001966:	430a      	orrs	r2, r1
 8001968:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800196a:	f7ff fa21 	bl	8000db0 <HAL_GetTick>
 800196e:	0003      	movs	r3, r0
 8001970:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x492>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001974:	f7ff fa1c 	bl	8000db0 <HAL_GetTick>
 8001978:	0002      	movs	r2, r0
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b64      	cmp	r3, #100	; 0x64
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x492>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e174      	b.n	8001c70 <HAL_RCC_OscConfig+0x77c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001986:	4b76      	ldr	r3, [pc, #472]	; (8001b60 <HAL_RCC_OscConfig+0x66c>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	2380      	movs	r3, #128	; 0x80
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4013      	ands	r3, r2
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0x480>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689a      	ldr	r2, [r3, #8]
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	429a      	cmp	r2, r3
 800199c:	d107      	bne.n	80019ae <HAL_RCC_OscConfig+0x4ba>
 800199e:	4b6d      	ldr	r3, [pc, #436]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 80019a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019a2:	4b6c      	ldr	r3, [pc, #432]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	0049      	lsls	r1, r1, #1
 80019a8:	430a      	orrs	r2, r1
 80019aa:	651a      	str	r2, [r3, #80]	; 0x50
 80019ac:	e031      	b.n	8001a12 <HAL_RCC_OscConfig+0x51e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x4dc>
 80019b6:	4b67      	ldr	r3, [pc, #412]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 80019b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019ba:	4b66      	ldr	r3, [pc, #408]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 80019bc:	4967      	ldr	r1, [pc, #412]	; (8001b5c <HAL_RCC_OscConfig+0x668>)
 80019be:	400a      	ands	r2, r1
 80019c0:	651a      	str	r2, [r3, #80]	; 0x50
 80019c2:	4b64      	ldr	r3, [pc, #400]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 80019c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019c6:	4b63      	ldr	r3, [pc, #396]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 80019c8:	4966      	ldr	r1, [pc, #408]	; (8001b64 <HAL_RCC_OscConfig+0x670>)
 80019ca:	400a      	ands	r2, r1
 80019cc:	651a      	str	r2, [r3, #80]	; 0x50
 80019ce:	e020      	b.n	8001a12 <HAL_RCC_OscConfig+0x51e>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	23a0      	movs	r3, #160	; 0xa0
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	429a      	cmp	r2, r3
 80019da:	d10e      	bne.n	80019fa <HAL_RCC_OscConfig+0x506>
 80019dc:	4b5d      	ldr	r3, [pc, #372]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 80019de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019e0:	4b5c      	ldr	r3, [pc, #368]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 80019e2:	2180      	movs	r1, #128	; 0x80
 80019e4:	00c9      	lsls	r1, r1, #3
 80019e6:	430a      	orrs	r2, r1
 80019e8:	651a      	str	r2, [r3, #80]	; 0x50
 80019ea:	4b5a      	ldr	r3, [pc, #360]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 80019ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019ee:	4b59      	ldr	r3, [pc, #356]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 80019f0:	2180      	movs	r1, #128	; 0x80
 80019f2:	0049      	lsls	r1, r1, #1
 80019f4:	430a      	orrs	r2, r1
 80019f6:	651a      	str	r2, [r3, #80]	; 0x50
 80019f8:	e00b      	b.n	8001a12 <HAL_RCC_OscConfig+0x51e>
 80019fa:	4b56      	ldr	r3, [pc, #344]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 80019fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019fe:	4b55      	ldr	r3, [pc, #340]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 8001a00:	4956      	ldr	r1, [pc, #344]	; (8001b5c <HAL_RCC_OscConfig+0x668>)
 8001a02:	400a      	ands	r2, r1
 8001a04:	651a      	str	r2, [r3, #80]	; 0x50
 8001a06:	4b53      	ldr	r3, [pc, #332]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 8001a08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a0a:	4b52      	ldr	r3, [pc, #328]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 8001a0c:	4955      	ldr	r1, [pc, #340]	; (8001b64 <HAL_RCC_OscConfig+0x670>)
 8001a0e:	400a      	ands	r2, r1
 8001a10:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d015      	beq.n	8001a46 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1a:	f7ff f9c9 	bl	8000db0 <HAL_GetTick>
 8001a1e:	0003      	movs	r3, r0
 8001a20:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a22:	e009      	b.n	8001a38 <HAL_RCC_OscConfig+0x544>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a24:	f7ff f9c4 	bl	8000db0 <HAL_GetTick>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	4a4e      	ldr	r2, [pc, #312]	; (8001b68 <HAL_RCC_OscConfig+0x674>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x544>
        {
          return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e11b      	b.n	8001c70 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a38:	4b46      	ldr	r3, [pc, #280]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 8001a3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4013      	ands	r3, r2
 8001a42:	d0ef      	beq.n	8001a24 <HAL_RCC_OscConfig+0x530>
 8001a44:	e014      	b.n	8001a70 <HAL_RCC_OscConfig+0x57c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a46:	f7ff f9b3 	bl	8000db0 <HAL_GetTick>
 8001a4a:	0003      	movs	r3, r0
 8001a4c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a4e:	e009      	b.n	8001a64 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a50:	f7ff f9ae 	bl	8000db0 <HAL_GetTick>
 8001a54:	0002      	movs	r2, r0
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	4a43      	ldr	r2, [pc, #268]	; (8001b68 <HAL_RCC_OscConfig+0x674>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e105      	b.n	8001c70 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a64:	4b3b      	ldr	r3, [pc, #236]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 8001a66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d1ef      	bne.n	8001a50 <HAL_RCC_OscConfig+0x55c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a70:	2327      	movs	r3, #39	; 0x27
 8001a72:	18fb      	adds	r3, r7, r3
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d105      	bne.n	8001a86 <HAL_RCC_OscConfig+0x592>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a7a:	4b36      	ldr	r3, [pc, #216]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 8001a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a7e:	4b35      	ldr	r3, [pc, #212]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 8001a80:	493a      	ldr	r1, [pc, #232]	; (8001b6c <HAL_RCC_OscConfig+0x678>)
 8001a82:	400a      	ands	r2, r1
 8001a84:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d049      	beq.n	8001b24 <HAL_RCC_OscConfig+0x630>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d026      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x5f2>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001a98:	4b2e      	ldr	r3, [pc, #184]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	4b2d      	ldr	r3, [pc, #180]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	4b2b      	ldr	r3, [pc, #172]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 8001aa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aa8:	4b2a      	ldr	r3, [pc, #168]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 8001aaa:	2101      	movs	r1, #1
 8001aac:	430a      	orrs	r2, r1
 8001aae:	635a      	str	r2, [r3, #52]	; 0x34
 8001ab0:	4b2f      	ldr	r3, [pc, #188]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001ab2:	6a1a      	ldr	r2, [r3, #32]
 8001ab4:	4b2e      	ldr	r3, [pc, #184]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001ab6:	2180      	movs	r1, #128	; 0x80
 8001ab8:	0189      	lsls	r1, r1, #6
 8001aba:	430a      	orrs	r2, r1
 8001abc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abe:	f7ff f977 	bl	8000db0 <HAL_GetTick>
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ac8:	f7ff f972 	bl	8000db0 <HAL_GetTick>
 8001acc:	0002      	movs	r2, r0
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e0ca      	b.n	8001c70 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ada:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d0f1      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x5d4>
 8001ae4:	e01e      	b.n	8001b24 <HAL_RCC_OscConfig+0x630>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001ae6:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 8001aec:	2101      	movs	r1, #1
 8001aee:	438a      	bics	r2, r1
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001af4:	6a1a      	ldr	r2, [r3, #32]
 8001af6:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <HAL_RCC_OscConfig+0x67c>)
 8001af8:	491e      	ldr	r1, [pc, #120]	; (8001b74 <HAL_RCC_OscConfig+0x680>)
 8001afa:	400a      	ands	r2, r1
 8001afc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afe:	f7ff f957 	bl	8000db0 <HAL_GetTick>
 8001b02:	0003      	movs	r3, r0
 8001b04:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x626>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b08:	f7ff f952 	bl	8000db0 <HAL_GetTick>
 8001b0c:	0002      	movs	r2, r0
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x626>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e0aa      	b.n	8001c70 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2202      	movs	r2, #2
 8001b20:	4013      	ands	r3, r2
 8001b22:	d1f1      	bne.n	8001b08 <HAL_RCC_OscConfig+0x614>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d100      	bne.n	8001b2e <HAL_RCC_OscConfig+0x63a>
 8001b2c:	e09f      	b.n	8001c6e <HAL_RCC_OscConfig+0x77a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	2b0c      	cmp	r3, #12
 8001b32:	d100      	bne.n	8001b36 <HAL_RCC_OscConfig+0x642>
 8001b34:	e078      	b.n	8001c28 <HAL_RCC_OscConfig+0x734>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d159      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x6fe>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <HAL_RCC_OscConfig+0x660>)
 8001b44:	490c      	ldr	r1, [pc, #48]	; (8001b78 <HAL_RCC_OscConfig+0x684>)
 8001b46:	400a      	ands	r2, r1
 8001b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4a:	f7ff f931 	bl	8000db0 <HAL_GetTick>
 8001b4e:	0003      	movs	r3, r0
 8001b50:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b52:	e01c      	b.n	8001b8e <HAL_RCC_OscConfig+0x69a>
 8001b54:	40021000 	.word	0x40021000
 8001b58:	ffff1fff 	.word	0xffff1fff
 8001b5c:	fffffeff 	.word	0xfffffeff
 8001b60:	40007000 	.word	0x40007000
 8001b64:	fffffbff 	.word	0xfffffbff
 8001b68:	00001388 	.word	0x00001388
 8001b6c:	efffffff 	.word	0xefffffff
 8001b70:	40010000 	.word	0x40010000
 8001b74:	ffffdfff 	.word	0xffffdfff
 8001b78:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b7c:	f7ff f918 	bl	8000db0 <HAL_GetTick>
 8001b80:	0002      	movs	r2, r0
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e070      	b.n	8001c70 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b8e:	4b3a      	ldr	r3, [pc, #232]	; (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	049b      	lsls	r3, r3, #18
 8001b96:	4013      	ands	r3, r2
 8001b98:	d1f0      	bne.n	8001b7c <HAL_RCC_OscConfig+0x688>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b9a:	4b37      	ldr	r3, [pc, #220]	; (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	4a37      	ldr	r2, [pc, #220]	; (8001c7c <HAL_RCC_OscConfig+0x788>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	0019      	movs	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	431a      	orrs	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bba:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001bc0:	2180      	movs	r1, #128	; 0x80
 8001bc2:	0449      	lsls	r1, r1, #17
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7ff f8f2 	bl	8000db0 <HAL_GetTick>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x6f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd2:	f7ff f8ed 	bl	8000db0 <HAL_GetTick>
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e045      	b.n	8001c70 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001be4:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	049b      	lsls	r3, r3, #18
 8001bec:	4013      	ands	r3, r2
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x6de>
 8001bf0:	e03d      	b.n	8001c6e <HAL_RCC_OscConfig+0x77a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf2:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001bf8:	4921      	ldr	r1, [pc, #132]	; (8001c80 <HAL_RCC_OscConfig+0x78c>)
 8001bfa:	400a      	ands	r2, r1
 8001bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7ff f8d7 	bl	8000db0 <HAL_GetTick>
 8001c02:	0003      	movs	r3, r0
 8001c04:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x726>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c08:	f7ff f8d2 	bl	8000db0 <HAL_GetTick>
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x726>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e02a      	b.n	8001c70 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c1a:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	049b      	lsls	r3, r3, #18
 8001c22:	4013      	ands	r3, r2
 8001c24:	d1f0      	bne.n	8001c08 <HAL_RCC_OscConfig+0x714>
 8001c26:	e022      	b.n	8001c6e <HAL_RCC_OscConfig+0x77a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e01d      	b.n	8001c70 <HAL_RCC_OscConfig+0x77c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c34:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	025b      	lsls	r3, r3, #9
 8001c40:	401a      	ands	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d10f      	bne.n	8001c6a <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c4a:	69fa      	ldr	r2, [r7, #28]
 8001c4c:	23f0      	movs	r3, #240	; 0xf0
 8001c4e:	039b      	lsls	r3, r3, #14
 8001c50:	401a      	ands	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001c5a:	69fa      	ldr	r2, [r7, #28]
 8001c5c:	23c0      	movs	r3, #192	; 0xc0
 8001c5e:	041b      	lsls	r3, r3, #16
 8001c60:	401a      	ands	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d001      	beq.n	8001c6e <HAL_RCC_OscConfig+0x77a>
        {
          return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_RCC_OscConfig+0x77c>
        }
      }
    }
  }
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	0018      	movs	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	b00a      	add	sp, #40	; 0x28
 8001c76:	bdb0      	pop	{r4, r5, r7, pc}
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	ff02ffff 	.word	0xff02ffff
 8001c80:	feffffff 	.word	0xfeffffff

08001c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c84:	b5b0      	push	{r4, r5, r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e129      	b.n	8001eec <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c98:	4b96      	ldr	r3, [pc, #600]	; (8001ef4 <HAL_RCC_ClockConfig+0x270>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d91e      	bls.n	8001ce4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca6:	4b93      	ldr	r3, [pc, #588]	; (8001ef4 <HAL_RCC_ClockConfig+0x270>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2201      	movs	r2, #1
 8001cac:	4393      	bics	r3, r2
 8001cae:	0019      	movs	r1, r3
 8001cb0:	4b90      	ldr	r3, [pc, #576]	; (8001ef4 <HAL_RCC_ClockConfig+0x270>)
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cb8:	f7ff f87a 	bl	8000db0 <HAL_GetTick>
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc0:	e009      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc2:	f7ff f875 	bl	8000db0 <HAL_GetTick>
 8001cc6:	0002      	movs	r2, r0
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	4a8a      	ldr	r2, [pc, #552]	; (8001ef8 <HAL_RCC_ClockConfig+0x274>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e10a      	b.n	8001eec <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd6:	4b87      	ldr	r3, [pc, #540]	; (8001ef4 <HAL_RCC_ClockConfig+0x270>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	4013      	ands	r3, r2
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d1ee      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	4013      	ands	r3, r2
 8001cec:	d009      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cee:	4b83      	ldr	r3, [pc, #524]	; (8001efc <HAL_RCC_ClockConfig+0x278>)
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	22f0      	movs	r2, #240	; 0xf0
 8001cf4:	4393      	bics	r3, r2
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	4b7f      	ldr	r3, [pc, #508]	; (8001efc <HAL_RCC_ClockConfig+0x278>)
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2201      	movs	r2, #1
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d100      	bne.n	8001d0e <HAL_RCC_ClockConfig+0x8a>
 8001d0c:	e089      	b.n	8001e22 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d16:	4b79      	ldr	r3, [pc, #484]	; (8001efc <HAL_RCC_ClockConfig+0x278>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	029b      	lsls	r3, r3, #10
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d120      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e0e2      	b.n	8001eec <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b03      	cmp	r3, #3
 8001d2c:	d107      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d2e:	4b73      	ldr	r3, [pc, #460]	; (8001efc <HAL_RCC_ClockConfig+0x278>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	2380      	movs	r3, #128	; 0x80
 8001d34:	049b      	lsls	r3, r3, #18
 8001d36:	4013      	ands	r3, r2
 8001d38:	d114      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e0d6      	b.n	8001eec <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d106      	bne.n	8001d54 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d46:	4b6d      	ldr	r3, [pc, #436]	; (8001efc <HAL_RCC_ClockConfig+0x278>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d109      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0cb      	b.n	8001eec <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d54:	4b69      	ldr	r3, [pc, #420]	; (8001efc <HAL_RCC_ClockConfig+0x278>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0c3      	b.n	8001eec <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d64:	4b65      	ldr	r3, [pc, #404]	; (8001efc <HAL_RCC_ClockConfig+0x278>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	2203      	movs	r2, #3
 8001d6a:	4393      	bics	r3, r2
 8001d6c:	0019      	movs	r1, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	4b62      	ldr	r3, [pc, #392]	; (8001efc <HAL_RCC_ClockConfig+0x278>)
 8001d74:	430a      	orrs	r2, r1
 8001d76:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d78:	f7ff f81a 	bl	8000db0 <HAL_GetTick>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d111      	bne.n	8001dac <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d88:	e009      	b.n	8001d9e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d8a:	f7ff f811 	bl	8000db0 <HAL_GetTick>
 8001d8e:	0002      	movs	r2, r0
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	4a58      	ldr	r2, [pc, #352]	; (8001ef8 <HAL_RCC_ClockConfig+0x274>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e0a6      	b.n	8001eec <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d9e:	4b57      	ldr	r3, [pc, #348]	; (8001efc <HAL_RCC_ClockConfig+0x278>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	220c      	movs	r2, #12
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d1ef      	bne.n	8001d8a <HAL_RCC_ClockConfig+0x106>
 8001daa:	e03a      	b.n	8001e22 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d111      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001db4:	e009      	b.n	8001dca <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db6:	f7fe fffb 	bl	8000db0 <HAL_GetTick>
 8001dba:	0002      	movs	r2, r0
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	4a4d      	ldr	r2, [pc, #308]	; (8001ef8 <HAL_RCC_ClockConfig+0x274>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e090      	b.n	8001eec <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dca:	4b4c      	ldr	r3, [pc, #304]	; (8001efc <HAL_RCC_ClockConfig+0x278>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	220c      	movs	r2, #12
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2b0c      	cmp	r3, #12
 8001dd4:	d1ef      	bne.n	8001db6 <HAL_RCC_ClockConfig+0x132>
 8001dd6:	e024      	b.n	8001e22 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d11b      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001de0:	e009      	b.n	8001df6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de2:	f7fe ffe5 	bl	8000db0 <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	4a42      	ldr	r2, [pc, #264]	; (8001ef8 <HAL_RCC_ClockConfig+0x274>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e07a      	b.n	8001eec <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001df6:	4b41      	ldr	r3, [pc, #260]	; (8001efc <HAL_RCC_ClockConfig+0x278>)
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d1ef      	bne.n	8001de2 <HAL_RCC_ClockConfig+0x15e>
 8001e02:	e00e      	b.n	8001e22 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e04:	f7fe ffd4 	bl	8000db0 <HAL_GetTick>
 8001e08:	0002      	movs	r2, r0
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	4a3a      	ldr	r2, [pc, #232]	; (8001ef8 <HAL_RCC_ClockConfig+0x274>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e069      	b.n	8001eec <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e18:	4b38      	ldr	r3, [pc, #224]	; (8001efc <HAL_RCC_ClockConfig+0x278>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	220c      	movs	r2, #12
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e22:	4b34      	ldr	r3, [pc, #208]	; (8001ef4 <HAL_RCC_ClockConfig+0x270>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2201      	movs	r2, #1
 8001e28:	4013      	ands	r3, r2
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d21e      	bcs.n	8001e6e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e30:	4b30      	ldr	r3, [pc, #192]	; (8001ef4 <HAL_RCC_ClockConfig+0x270>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2201      	movs	r2, #1
 8001e36:	4393      	bics	r3, r2
 8001e38:	0019      	movs	r1, r3
 8001e3a:	4b2e      	ldr	r3, [pc, #184]	; (8001ef4 <HAL_RCC_ClockConfig+0x270>)
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e42:	f7fe ffb5 	bl	8000db0 <HAL_GetTick>
 8001e46:	0003      	movs	r3, r0
 8001e48:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4a:	e009      	b.n	8001e60 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4c:	f7fe ffb0 	bl	8000db0 <HAL_GetTick>
 8001e50:	0002      	movs	r2, r0
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	4a28      	ldr	r2, [pc, #160]	; (8001ef8 <HAL_RCC_ClockConfig+0x274>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e045      	b.n	8001eec <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e60:	4b24      	ldr	r3, [pc, #144]	; (8001ef4 <HAL_RCC_ClockConfig+0x270>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2201      	movs	r2, #1
 8001e66:	4013      	ands	r3, r2
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d1ee      	bne.n	8001e4c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2204      	movs	r2, #4
 8001e74:	4013      	ands	r3, r2
 8001e76:	d009      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e78:	4b20      	ldr	r3, [pc, #128]	; (8001efc <HAL_RCC_ClockConfig+0x278>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	4a20      	ldr	r2, [pc, #128]	; (8001f00 <HAL_RCC_ClockConfig+0x27c>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	0019      	movs	r1, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <HAL_RCC_ClockConfig+0x278>)
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2208      	movs	r2, #8
 8001e92:	4013      	ands	r3, r2
 8001e94:	d00a      	beq.n	8001eac <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e96:	4b19      	ldr	r3, [pc, #100]	; (8001efc <HAL_RCC_ClockConfig+0x278>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	4a1a      	ldr	r2, [pc, #104]	; (8001f04 <HAL_RCC_ClockConfig+0x280>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	0019      	movs	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	00da      	lsls	r2, r3, #3
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <HAL_RCC_ClockConfig+0x278>)
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eac:	f000 f832 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8001eb0:	0001      	movs	r1, r0
 8001eb2:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_RCC_ClockConfig+0x278>)
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	091b      	lsrs	r3, r3, #4
 8001eb8:	220f      	movs	r2, #15
 8001eba:	4013      	ands	r3, r2
 8001ebc:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <HAL_RCC_ClockConfig+0x284>)
 8001ebe:	5cd3      	ldrb	r3, [r2, r3]
 8001ec0:	000a      	movs	r2, r1
 8001ec2:	40da      	lsrs	r2, r3
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <HAL_RCC_ClockConfig+0x288>)
 8001ec6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <HAL_RCC_ClockConfig+0x28c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	250b      	movs	r5, #11
 8001ece:	197c      	adds	r4, r7, r5
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f7fe ff27 	bl	8000d24 <HAL_InitTick>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001eda:	197b      	adds	r3, r7, r5
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 8001ee2:	230b      	movs	r3, #11
 8001ee4:	18fb      	adds	r3, r7, r3
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	e000      	b.n	8001eec <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	0018      	movs	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	b004      	add	sp, #16
 8001ef2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ef4:	40022000 	.word	0x40022000
 8001ef8:	00001388 	.word	0x00001388
 8001efc:	40021000 	.word	0x40021000
 8001f00:	fffff8ff 	.word	0xfffff8ff
 8001f04:	ffffc7ff 	.word	0xffffc7ff
 8001f08:	0800388c 	.word	0x0800388c
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	20000004 	.word	0x20000004

08001f14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f16:	b08f      	sub	sp, #60	; 0x3c
 8001f18:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001f1a:	4b4a      	ldr	r3, [pc, #296]	; (8002044 <HAL_RCC_GetSysClockFreq+0x130>)
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f22:	230c      	movs	r3, #12
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d00f      	beq.n	8001f4a <HAL_RCC_GetSysClockFreq+0x36>
 8001f2a:	2b0c      	cmp	r3, #12
 8001f2c:	d010      	beq.n	8001f50 <HAL_RCC_GetSysClockFreq+0x3c>
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d000      	beq.n	8001f34 <HAL_RCC_GetSysClockFreq+0x20>
 8001f32:	e073      	b.n	800201c <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f34:	4b43      	ldr	r3, [pc, #268]	; (8002044 <HAL_RCC_GetSysClockFreq+0x130>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2210      	movs	r2, #16
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d002      	beq.n	8001f44 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001f3e:	4b42      	ldr	r3, [pc, #264]	; (8002048 <HAL_RCC_GetSysClockFreq+0x134>)
 8001f40:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001f42:	e079      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8001f44:	4b41      	ldr	r3, [pc, #260]	; (800204c <HAL_RCC_GetSysClockFreq+0x138>)
 8001f46:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f48:	e076      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f4a:	4b41      	ldr	r3, [pc, #260]	; (8002050 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f4c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f4e:	e073      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f52:	0c9a      	lsrs	r2, r3, #18
 8001f54:	230f      	movs	r3, #15
 8001f56:	401a      	ands	r2, r3
 8001f58:	4b3e      	ldr	r3, [pc, #248]	; (8002054 <HAL_RCC_GetSysClockFreq+0x140>)
 8001f5a:	5c9b      	ldrb	r3, [r3, r2]
 8001f5c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f60:	0d9a      	lsrs	r2, r3, #22
 8001f62:	2303      	movs	r3, #3
 8001f64:	4013      	ands	r3, r2
 8001f66:	3301      	adds	r3, #1
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f6a:	4b36      	ldr	r3, [pc, #216]	; (8002044 <HAL_RCC_GetSysClockFreq+0x130>)
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	025b      	lsls	r3, r3, #9
 8001f72:	4013      	ands	r3, r2
 8001f74:	d019      	beq.n	8001faa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f78:	61bb      	str	r3, [r7, #24]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	4a34      	ldr	r2, [pc, #208]	; (8002050 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f80:	2300      	movs	r3, #0
 8001f82:	69b8      	ldr	r0, [r7, #24]
 8001f84:	69f9      	ldr	r1, [r7, #28]
 8001f86:	f7fe f96b 	bl	8000260 <__aeabi_lmul>
 8001f8a:	0003      	movs	r3, r0
 8001f8c:	000c      	movs	r4, r1
 8001f8e:	0018      	movs	r0, r3
 8001f90:	0021      	movs	r1, r4
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f7fe f93f 	bl	8000220 <__aeabi_uldivmod>
 8001fa2:	0003      	movs	r3, r0
 8001fa4:	000c      	movs	r4, r1
 8001fa6:	637b      	str	r3, [r7, #52]	; 0x34
 8001fa8:	e035      	b.n	8002016 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001faa:	4b26      	ldr	r3, [pc, #152]	; (8002044 <HAL_RCC_GetSysClockFreq+0x130>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2210      	movs	r2, #16
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d019      	beq.n	8001fe8 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	4a22      	ldr	r2, [pc, #136]	; (8002048 <HAL_RCC_GetSysClockFreq+0x134>)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	68b8      	ldr	r0, [r7, #8]
 8001fc2:	68f9      	ldr	r1, [r7, #12]
 8001fc4:	f7fe f94c 	bl	8000260 <__aeabi_lmul>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	000c      	movs	r4, r1
 8001fcc:	0018      	movs	r0, r3
 8001fce:	0021      	movs	r1, r4
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	607b      	str	r3, [r7, #4]
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f7fe f920 	bl	8000220 <__aeabi_uldivmod>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	000c      	movs	r4, r1
 8001fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8001fe6:	e016      	b.n	8002016 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fea:	0018      	movs	r0, r3
 8001fec:	2300      	movs	r3, #0
 8001fee:	0019      	movs	r1, r3
 8001ff0:	4a16      	ldr	r2, [pc, #88]	; (800204c <HAL_RCC_GetSysClockFreq+0x138>)
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f7fe f934 	bl	8000260 <__aeabi_lmul>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	000c      	movs	r4, r1
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	0021      	movs	r1, r4
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	001d      	movs	r5, r3
 8002004:	2300      	movs	r3, #0
 8002006:	001e      	movs	r6, r3
 8002008:	002a      	movs	r2, r5
 800200a:	0033      	movs	r3, r6
 800200c:	f7fe f908 	bl	8000220 <__aeabi_uldivmod>
 8002010:	0003      	movs	r3, r0
 8002012:	000c      	movs	r4, r1
 8002014:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002018:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800201a:	e00d      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <HAL_RCC_GetSysClockFreq+0x130>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	0b5b      	lsrs	r3, r3, #13
 8002022:	2207      	movs	r2, #7
 8002024:	4013      	ands	r3, r2
 8002026:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	3301      	adds	r3, #1
 800202c:	2280      	movs	r2, #128	; 0x80
 800202e:	0212      	lsls	r2, r2, #8
 8002030:	409a      	lsls	r2, r3
 8002032:	0013      	movs	r3, r2
 8002034:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002036:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800203a:	0018      	movs	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	b00f      	add	sp, #60	; 0x3c
 8002040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	40021000 	.word	0x40021000
 8002048:	003d0900 	.word	0x003d0900
 800204c:	00f42400 	.word	0x00f42400
 8002050:	007a1200 	.word	0x007a1200
 8002054:	080038a4 	.word	0x080038a4

08002058 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800205c:	4b02      	ldr	r3, [pc, #8]	; (8002068 <HAL_RCC_GetHCLKFreq+0x10>)
 800205e:	681b      	ldr	r3, [r3, #0]
}
 8002060:	0018      	movs	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	20000000 	.word	0x20000000

0800206c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002070:	f7ff fff2 	bl	8002058 <HAL_RCC_GetHCLKFreq>
 8002074:	0001      	movs	r1, r0
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	0a1b      	lsrs	r3, r3, #8
 800207c:	2207      	movs	r2, #7
 800207e:	4013      	ands	r3, r2
 8002080:	4a04      	ldr	r2, [pc, #16]	; (8002094 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002082:	5cd3      	ldrb	r3, [r2, r3]
 8002084:	40d9      	lsrs	r1, r3
 8002086:	000b      	movs	r3, r1
}
 8002088:	0018      	movs	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	40021000 	.word	0x40021000
 8002094:	0800389c 	.word	0x0800389c

08002098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800209c:	f7ff ffdc 	bl	8002058 <HAL_RCC_GetHCLKFreq>
 80020a0:	0001      	movs	r1, r0
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	0adb      	lsrs	r3, r3, #11
 80020a8:	2207      	movs	r2, #7
 80020aa:	4013      	ands	r3, r2
 80020ac:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020ae:	5cd3      	ldrb	r3, [r2, r3]
 80020b0:	40d9      	lsrs	r1, r3
 80020b2:	000b      	movs	r3, r1
}
 80020b4:	0018      	movs	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	40021000 	.word	0x40021000
 80020c0:	0800389c 	.word	0x0800389c

080020c4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80020cc:	2317      	movs	r3, #23
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2220      	movs	r2, #32
 80020da:	4013      	ands	r3, r2
 80020dc:	d100      	bne.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80020de:	e0c3      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e0:	4b91      	ldr	r3, [pc, #580]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	055b      	lsls	r3, r3, #21
 80020e8:	4013      	ands	r3, r2
 80020ea:	d10a      	bne.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ec:	4b8e      	ldr	r3, [pc, #568]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020f0:	4b8d      	ldr	r3, [pc, #564]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020f2:	2180      	movs	r1, #128	; 0x80
 80020f4:	0549      	lsls	r1, r1, #21
 80020f6:	430a      	orrs	r2, r1
 80020f8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80020fa:	2317      	movs	r3, #23
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	2201      	movs	r2, #1
 8002100:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002102:	4b8a      	ldr	r3, [pc, #552]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4013      	ands	r3, r2
 800210c:	d11a      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800210e:	4b87      	ldr	r3, [pc, #540]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	4b86      	ldr	r3, [pc, #536]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002114:	2180      	movs	r1, #128	; 0x80
 8002116:	0049      	lsls	r1, r1, #1
 8002118:	430a      	orrs	r2, r1
 800211a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800211c:	f7fe fe48 	bl	8000db0 <HAL_GetTick>
 8002120:	0003      	movs	r3, r0
 8002122:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002124:	e008      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002126:	f7fe fe43 	bl	8000db0 <HAL_GetTick>
 800212a:	0002      	movs	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b64      	cmp	r3, #100	; 0x64
 8002132:	d901      	bls.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e0f2      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002138:	4b7c      	ldr	r3, [pc, #496]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4013      	ands	r3, r2
 8002142:	d0f0      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002144:	4b78      	ldr	r3, [pc, #480]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	23c0      	movs	r3, #192	; 0xc0
 800214a:	039b      	lsls	r3, r3, #14
 800214c:	4013      	ands	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	23c0      	movs	r3, #192	; 0xc0
 8002156:	039b      	lsls	r3, r3, #14
 8002158:	4013      	ands	r3, r2
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	429a      	cmp	r2, r3
 800215e:	d013      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	23c0      	movs	r3, #192	; 0xc0
 8002166:	029b      	lsls	r3, r3, #10
 8002168:	401a      	ands	r2, r3
 800216a:	23c0      	movs	r3, #192	; 0xc0
 800216c:	029b      	lsls	r3, r3, #10
 800216e:	429a      	cmp	r2, r3
 8002170:	d10a      	bne.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002172:	4b6d      	ldr	r3, [pc, #436]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	029b      	lsls	r3, r3, #10
 800217a:	401a      	ands	r2, r3
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	029b      	lsls	r3, r3, #10
 8002180:	429a      	cmp	r2, r3
 8002182:	d101      	bne.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0ca      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002188:	4b67      	ldr	r3, [pc, #412]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800218a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800218c:	23c0      	movs	r3, #192	; 0xc0
 800218e:	029b      	lsls	r3, r3, #10
 8002190:	4013      	ands	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d03b      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	23c0      	movs	r3, #192	; 0xc0
 80021a0:	029b      	lsls	r3, r3, #10
 80021a2:	4013      	ands	r3, r2
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d033      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2220      	movs	r2, #32
 80021b0:	4013      	ands	r3, r2
 80021b2:	d02e      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80021b4:	4b5c      	ldr	r3, [pc, #368]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b8:	4a5d      	ldr	r2, [pc, #372]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021be:	4b5a      	ldr	r3, [pc, #360]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021c2:	4b59      	ldr	r3, [pc, #356]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021c4:	2180      	movs	r1, #128	; 0x80
 80021c6:	0309      	lsls	r1, r1, #12
 80021c8:	430a      	orrs	r2, r1
 80021ca:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021cc:	4b56      	ldr	r3, [pc, #344]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021d0:	4b55      	ldr	r3, [pc, #340]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021d2:	4958      	ldr	r1, [pc, #352]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80021d4:	400a      	ands	r2, r1
 80021d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80021d8:	4b53      	ldr	r3, [pc, #332]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	2380      	movs	r3, #128	; 0x80
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4013      	ands	r3, r2
 80021e6:	d014      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7fe fde2 	bl	8000db0 <HAL_GetTick>
 80021ec:	0003      	movs	r3, r0
 80021ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021f0:	e009      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f2:	f7fe fddd 	bl	8000db0 <HAL_GetTick>
 80021f6:	0002      	movs	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	4a4e      	ldr	r2, [pc, #312]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d901      	bls.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e08b      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x25a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002206:	4b48      	ldr	r3, [pc, #288]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002208:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800220a:	2380      	movs	r3, #128	; 0x80
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4013      	ands	r3, r2
 8002210:	d0ef      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	23c0      	movs	r3, #192	; 0xc0
 8002218:	029b      	lsls	r3, r3, #10
 800221a:	401a      	ands	r2, r3
 800221c:	23c0      	movs	r3, #192	; 0xc0
 800221e:	029b      	lsls	r3, r3, #10
 8002220:	429a      	cmp	r2, r3
 8002222:	d10c      	bne.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002224:	4b40      	ldr	r3, [pc, #256]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a44      	ldr	r2, [pc, #272]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800222a:	4013      	ands	r3, r2
 800222c:	0019      	movs	r1, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	23c0      	movs	r3, #192	; 0xc0
 8002234:	039b      	lsls	r3, r3, #14
 8002236:	401a      	ands	r2, r3
 8002238:	4b3b      	ldr	r3, [pc, #236]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800223a:	430a      	orrs	r2, r1
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	4b3a      	ldr	r3, [pc, #232]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002240:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	23c0      	movs	r3, #192	; 0xc0
 8002248:	029b      	lsls	r3, r3, #10
 800224a:	401a      	ands	r2, r3
 800224c:	4b36      	ldr	r3, [pc, #216]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800224e:	430a      	orrs	r2, r1
 8002250:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002252:	2317      	movs	r3, #23
 8002254:	18fb      	adds	r3, r7, r3
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d105      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800225c:	4b32      	ldr	r3, [pc, #200]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800225e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002260:	4b31      	ldr	r3, [pc, #196]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002262:	4937      	ldr	r1, [pc, #220]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002264:	400a      	ands	r2, r1
 8002266:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2201      	movs	r2, #1
 800226e:	4013      	ands	r3, r2
 8002270:	d009      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002272:	4b2d      	ldr	r3, [pc, #180]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002276:	2203      	movs	r2, #3
 8002278:	4393      	bics	r3, r2
 800227a:	0019      	movs	r1, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	4b29      	ldr	r3, [pc, #164]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002282:	430a      	orrs	r2, r1
 8002284:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2202      	movs	r2, #2
 800228c:	4013      	ands	r3, r2
 800228e:	d009      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002290:	4b25      	ldr	r3, [pc, #148]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002294:	220c      	movs	r2, #12
 8002296:	4393      	bics	r3, r2
 8002298:	0019      	movs	r1, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	4b22      	ldr	r3, [pc, #136]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022a0:	430a      	orrs	r2, r1
 80022a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2204      	movs	r2, #4
 80022aa:	4013      	ands	r3, r2
 80022ac:	d009      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022ae:	4b1e      	ldr	r3, [pc, #120]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b2:	4a24      	ldr	r2, [pc, #144]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	0019      	movs	r1, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022be:	430a      	orrs	r2, r1
 80022c0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2208      	movs	r2, #8
 80022c8:	4013      	ands	r3, r2
 80022ca:	d009      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022cc:	4b16      	ldr	r3, [pc, #88]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d0:	4a1d      	ldr	r2, [pc, #116]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80022d2:	4013      	ands	r3, r2
 80022d4:	0019      	movs	r1, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	4b13      	ldr	r3, [pc, #76]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022dc:	430a      	orrs	r2, r1
 80022de:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2240      	movs	r2, #64	; 0x40
 80022e6:	4013      	ands	r3, r2
 80022e8:	d009      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022ea:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ee:	4a17      	ldr	r2, [pc, #92]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	0019      	movs	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69da      	ldr	r2, [r3, #28]
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022fa:	430a      	orrs	r2, r1
 80022fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2280      	movs	r2, #128	; 0x80
 8002304:	4013      	ands	r3, r2
 8002306:	d009      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002308:	4b07      	ldr	r3, [pc, #28]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800230a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230c:	4a10      	ldr	r2, [pc, #64]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800230e:	4013      	ands	r3, r2
 8002310:	0019      	movs	r1, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699a      	ldr	r2, [r3, #24]
 8002316:	4b04      	ldr	r3, [pc, #16]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002318:	430a      	orrs	r2, r1
 800231a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	0018      	movs	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	b006      	add	sp, #24
 8002324:	bd80      	pop	{r7, pc}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	40021000 	.word	0x40021000
 800232c:	40007000 	.word	0x40007000
 8002330:	fffcffff 	.word	0xfffcffff
 8002334:	fff7ffff 	.word	0xfff7ffff
 8002338:	00001388 	.word	0x00001388
 800233c:	ffcfffff 	.word	0xffcfffff
 8002340:	efffffff 	.word	0xefffffff
 8002344:	fffff3ff 	.word	0xfffff3ff
 8002348:	ffffcfff 	.word	0xffffcfff
 800234c:	fbffffff 	.word	0xfbffffff
 8002350:	fff3ffff 	.word	0xfff3ffff

08002354 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e083      	b.n	800246e <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	2b00      	cmp	r3, #0
 800236c:	d109      	bne.n	8002382 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	2382      	movs	r3, #130	; 0x82
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	429a      	cmp	r2, r3
 8002378:	d009      	beq.n	800238e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	61da      	str	r2, [r3, #28]
 8002380:	e005      	b.n	800238e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2251      	movs	r2, #81	; 0x51
 8002398:	5c9b      	ldrb	r3, [r3, r2]
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d107      	bne.n	80023b0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2250      	movs	r2, #80	; 0x50
 80023a4:	2100      	movs	r1, #0
 80023a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	0018      	movs	r0, r3
 80023ac:	f7fe fb1a 	bl	80009e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2251      	movs	r2, #81	; 0x51
 80023b4:	2102      	movs	r1, #2
 80023b6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2140      	movs	r1, #64	; 0x40
 80023c4:	438a      	bics	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	2382      	movs	r3, #130	; 0x82
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	401a      	ands	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6899      	ldr	r1, [r3, #8]
 80023d6:	2384      	movs	r3, #132	; 0x84
 80023d8:	021b      	lsls	r3, r3, #8
 80023da:	400b      	ands	r3, r1
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68d9      	ldr	r1, [r3, #12]
 80023e2:	2380      	movs	r3, #128	; 0x80
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	400b      	ands	r3, r1
 80023e8:	431a      	orrs	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	2102      	movs	r1, #2
 80023f0:	400b      	ands	r3, r1
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	2101      	movs	r1, #1
 80023fa:	400b      	ands	r3, r1
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6999      	ldr	r1, [r3, #24]
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	400b      	ands	r3, r1
 8002408:	431a      	orrs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	2138      	movs	r1, #56	; 0x38
 8002410:	400b      	ands	r3, r1
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	2180      	movs	r1, #128	; 0x80
 800241a:	400b      	ands	r3, r1
 800241c:	431a      	orrs	r2, r3
 800241e:	0011      	movs	r1, r2
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002424:	2380      	movs	r3, #128	; 0x80
 8002426:	019b      	lsls	r3, r3, #6
 8002428:	401a      	ands	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	0c1b      	lsrs	r3, r3, #16
 8002438:	2204      	movs	r2, #4
 800243a:	4013      	ands	r3, r2
 800243c:	0019      	movs	r1, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	2210      	movs	r2, #16
 8002444:	401a      	ands	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	69da      	ldr	r2, [r3, #28]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4907      	ldr	r1, [pc, #28]	; (8002478 <HAL_SPI_Init+0x124>)
 800245a:	400a      	ands	r2, r1
 800245c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2251      	movs	r2, #81	; 0x51
 8002468:	2101      	movs	r1, #1
 800246a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	0018      	movs	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	b002      	add	sp, #8
 8002474:	bd80      	pop	{r7, pc}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	fffff7ff 	.word	0xfffff7ff

0800247c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e044      	b.n	8002518 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002492:	2b00      	cmp	r3, #0
 8002494:	d107      	bne.n	80024a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2274      	movs	r2, #116	; 0x74
 800249a:	2100      	movs	r1, #0
 800249c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	0018      	movs	r0, r3
 80024a2:	f7fe fae3 	bl	8000a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2224      	movs	r2, #36	; 0x24
 80024aa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2101      	movs	r1, #1
 80024b8:	438a      	bics	r2, r1
 80024ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	0018      	movs	r0, r3
 80024c0:	f000 f8d8 	bl	8002674 <UART_SetConfig>
 80024c4:	0003      	movs	r3, r0
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e024      	b.n	8002518 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	0018      	movs	r0, r3
 80024da:	f000 fb69 	bl	8002bb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	490d      	ldr	r1, [pc, #52]	; (8002520 <HAL_UART_Init+0xa4>)
 80024ea:	400a      	ands	r2, r1
 80024ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	212a      	movs	r1, #42	; 0x2a
 80024fa:	438a      	bics	r2, r1
 80024fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2101      	movs	r1, #1
 800250a:	430a      	orrs	r2, r1
 800250c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	0018      	movs	r0, r3
 8002512:	f000 fc01 	bl	8002d18 <UART_CheckIdleState>
 8002516:	0003      	movs	r3, r0
}
 8002518:	0018      	movs	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	b002      	add	sp, #8
 800251e:	bd80      	pop	{r7, pc}
 8002520:	ffffb7ff 	.word	0xffffb7ff

08002524 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08a      	sub	sp, #40	; 0x28
 8002528:	af02      	add	r7, sp, #8
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	1dbb      	adds	r3, r7, #6
 8002532:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002538:	2b20      	cmp	r3, #32
 800253a:	d000      	beq.n	800253e <HAL_UART_Transmit+0x1a>
 800253c:	e095      	b.n	800266a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_UART_Transmit+0x28>
 8002544:	1dbb      	adds	r3, r7, #6
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e08d      	b.n	800266c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	2380      	movs	r3, #128	; 0x80
 8002556:	015b      	lsls	r3, r3, #5
 8002558:	429a      	cmp	r2, r3
 800255a:	d109      	bne.n	8002570 <HAL_UART_Transmit+0x4c>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d105      	bne.n	8002570 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2201      	movs	r2, #1
 8002568:	4013      	ands	r3, r2
 800256a:	d001      	beq.n	8002570 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e07d      	b.n	800266c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2274      	movs	r2, #116	; 0x74
 8002574:	5c9b      	ldrb	r3, [r3, r2]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_UART_Transmit+0x5a>
 800257a:	2302      	movs	r3, #2
 800257c:	e076      	b.n	800266c <HAL_UART_Transmit+0x148>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2274      	movs	r2, #116	; 0x74
 8002582:	2101      	movs	r1, #1
 8002584:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2280      	movs	r2, #128	; 0x80
 800258a:	2100      	movs	r1, #0
 800258c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2221      	movs	r2, #33	; 0x21
 8002592:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002594:	f7fe fc0c 	bl	8000db0 <HAL_GetTick>
 8002598:	0003      	movs	r3, r0
 800259a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1dba      	adds	r2, r7, #6
 80025a0:	2150      	movs	r1, #80	; 0x50
 80025a2:	8812      	ldrh	r2, [r2, #0]
 80025a4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	1dba      	adds	r2, r7, #6
 80025aa:	2152      	movs	r1, #82	; 0x52
 80025ac:	8812      	ldrh	r2, [r2, #0]
 80025ae:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	015b      	lsls	r3, r3, #5
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d108      	bne.n	80025ce <HAL_UART_Transmit+0xaa>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d104      	bne.n	80025ce <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	61bb      	str	r3, [r7, #24]
 80025cc:	e003      	b.n	80025d6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2274      	movs	r2, #116	; 0x74
 80025da:	2100      	movs	r1, #0
 80025dc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80025de:	e02c      	b.n	800263a <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	0013      	movs	r3, r2
 80025ea:	2200      	movs	r2, #0
 80025ec:	2180      	movs	r1, #128	; 0x80
 80025ee:	f000 fbdd 	bl	8002dac <UART_WaitOnFlagUntilTimeout>
 80025f2:	1e03      	subs	r3, r0, #0
 80025f4:	d001      	beq.n	80025fa <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e038      	b.n	800266c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10b      	bne.n	8002618 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	001a      	movs	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	05d2      	lsls	r2, r2, #23
 800260c:	0dd2      	lsrs	r2, r2, #23
 800260e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	3302      	adds	r3, #2
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	e007      	b.n	8002628 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	781a      	ldrb	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3301      	adds	r3, #1
 8002626:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2252      	movs	r2, #82	; 0x52
 800262c:	5a9b      	ldrh	r3, [r3, r2]
 800262e:	b29b      	uxth	r3, r3
 8002630:	3b01      	subs	r3, #1
 8002632:	b299      	uxth	r1, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2252      	movs	r2, #82	; 0x52
 8002638:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2252      	movs	r2, #82	; 0x52
 800263e:	5a9b      	ldrh	r3, [r3, r2]
 8002640:	b29b      	uxth	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1cc      	bne.n	80025e0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	0013      	movs	r3, r2
 8002650:	2200      	movs	r2, #0
 8002652:	2140      	movs	r1, #64	; 0x40
 8002654:	f000 fbaa 	bl	8002dac <UART_WaitOnFlagUntilTimeout>
 8002658:	1e03      	subs	r3, r0, #0
 800265a:	d001      	beq.n	8002660 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e005      	b.n	800266c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2220      	movs	r2, #32
 8002664:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	e000      	b.n	800266c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800266a:	2302      	movs	r3, #2
  }
}
 800266c:	0018      	movs	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	b008      	add	sp, #32
 8002672:	bd80      	pop	{r7, pc}

08002674 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002674:	b5b0      	push	{r4, r5, r7, lr}
 8002676:	b08e      	sub	sp, #56	; 0x38
 8002678:	af00      	add	r7, sp, #0
 800267a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800267c:	231a      	movs	r3, #26
 800267e:	2218      	movs	r2, #24
 8002680:	4694      	mov	ip, r2
 8002682:	44bc      	add	ip, r7
 8002684:	4463      	add	r3, ip
 8002686:	2200      	movs	r2, #0
 8002688:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	431a      	orrs	r2, r3
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	431a      	orrs	r2, r3
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	4313      	orrs	r3, r2
 80026a0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4aca      	ldr	r2, [pc, #808]	; (80029d4 <UART_SetConfig+0x360>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	0019      	movs	r1, r3
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026b4:	430a      	orrs	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4ac6      	ldr	r2, [pc, #792]	; (80029d8 <UART_SetConfig+0x364>)
 80026c0:	4013      	ands	r3, r2
 80026c2:	0019      	movs	r1, r3
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4ac0      	ldr	r2, [pc, #768]	; (80029dc <UART_SetConfig+0x368>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d004      	beq.n	80026ea <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026e6:	4313      	orrs	r3, r2
 80026e8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	4abb      	ldr	r2, [pc, #748]	; (80029e0 <UART_SetConfig+0x36c>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026fc:	430a      	orrs	r2, r1
 80026fe:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4ab7      	ldr	r2, [pc, #732]	; (80029e4 <UART_SetConfig+0x370>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d134      	bne.n	8002774 <UART_SetConfig+0x100>
 800270a:	4bb7      	ldr	r3, [pc, #732]	; (80029e8 <UART_SetConfig+0x374>)
 800270c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270e:	2203      	movs	r2, #3
 8002710:	4013      	ands	r3, r2
 8002712:	2b01      	cmp	r3, #1
 8002714:	d015      	beq.n	8002742 <UART_SetConfig+0xce>
 8002716:	d304      	bcc.n	8002722 <UART_SetConfig+0xae>
 8002718:	2b02      	cmp	r3, #2
 800271a:	d00a      	beq.n	8002732 <UART_SetConfig+0xbe>
 800271c:	2b03      	cmp	r3, #3
 800271e:	d018      	beq.n	8002752 <UART_SetConfig+0xde>
 8002720:	e01f      	b.n	8002762 <UART_SetConfig+0xee>
 8002722:	231b      	movs	r3, #27
 8002724:	2218      	movs	r2, #24
 8002726:	4694      	mov	ip, r2
 8002728:	44bc      	add	ip, r7
 800272a:	4463      	add	r3, ip
 800272c:	2201      	movs	r2, #1
 800272e:	701a      	strb	r2, [r3, #0]
 8002730:	e0ab      	b.n	800288a <UART_SetConfig+0x216>
 8002732:	231b      	movs	r3, #27
 8002734:	2218      	movs	r2, #24
 8002736:	4694      	mov	ip, r2
 8002738:	44bc      	add	ip, r7
 800273a:	4463      	add	r3, ip
 800273c:	2202      	movs	r2, #2
 800273e:	701a      	strb	r2, [r3, #0]
 8002740:	e0a3      	b.n	800288a <UART_SetConfig+0x216>
 8002742:	231b      	movs	r3, #27
 8002744:	2218      	movs	r2, #24
 8002746:	4694      	mov	ip, r2
 8002748:	44bc      	add	ip, r7
 800274a:	4463      	add	r3, ip
 800274c:	2204      	movs	r2, #4
 800274e:	701a      	strb	r2, [r3, #0]
 8002750:	e09b      	b.n	800288a <UART_SetConfig+0x216>
 8002752:	231b      	movs	r3, #27
 8002754:	2218      	movs	r2, #24
 8002756:	4694      	mov	ip, r2
 8002758:	44bc      	add	ip, r7
 800275a:	4463      	add	r3, ip
 800275c:	2208      	movs	r2, #8
 800275e:	701a      	strb	r2, [r3, #0]
 8002760:	e093      	b.n	800288a <UART_SetConfig+0x216>
 8002762:	231b      	movs	r3, #27
 8002764:	2218      	movs	r2, #24
 8002766:	4694      	mov	ip, r2
 8002768:	44bc      	add	ip, r7
 800276a:	4463      	add	r3, ip
 800276c:	2210      	movs	r2, #16
 800276e:	701a      	strb	r2, [r3, #0]
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	e08a      	b.n	800288a <UART_SetConfig+0x216>
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a9c      	ldr	r2, [pc, #624]	; (80029ec <UART_SetConfig+0x378>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d137      	bne.n	80027ee <UART_SetConfig+0x17a>
 800277e:	4b9a      	ldr	r3, [pc, #616]	; (80029e8 <UART_SetConfig+0x374>)
 8002780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002782:	220c      	movs	r2, #12
 8002784:	4013      	ands	r3, r2
 8002786:	2b04      	cmp	r3, #4
 8002788:	d018      	beq.n	80027bc <UART_SetConfig+0x148>
 800278a:	d802      	bhi.n	8002792 <UART_SetConfig+0x11e>
 800278c:	2b00      	cmp	r3, #0
 800278e:	d005      	beq.n	800279c <UART_SetConfig+0x128>
 8002790:	e024      	b.n	80027dc <UART_SetConfig+0x168>
 8002792:	2b08      	cmp	r3, #8
 8002794:	d00a      	beq.n	80027ac <UART_SetConfig+0x138>
 8002796:	2b0c      	cmp	r3, #12
 8002798:	d018      	beq.n	80027cc <UART_SetConfig+0x158>
 800279a:	e01f      	b.n	80027dc <UART_SetConfig+0x168>
 800279c:	231b      	movs	r3, #27
 800279e:	2218      	movs	r2, #24
 80027a0:	4694      	mov	ip, r2
 80027a2:	44bc      	add	ip, r7
 80027a4:	4463      	add	r3, ip
 80027a6:	2200      	movs	r2, #0
 80027a8:	701a      	strb	r2, [r3, #0]
 80027aa:	e06e      	b.n	800288a <UART_SetConfig+0x216>
 80027ac:	231b      	movs	r3, #27
 80027ae:	2218      	movs	r2, #24
 80027b0:	4694      	mov	ip, r2
 80027b2:	44bc      	add	ip, r7
 80027b4:	4463      	add	r3, ip
 80027b6:	2202      	movs	r2, #2
 80027b8:	701a      	strb	r2, [r3, #0]
 80027ba:	e066      	b.n	800288a <UART_SetConfig+0x216>
 80027bc:	231b      	movs	r3, #27
 80027be:	2218      	movs	r2, #24
 80027c0:	4694      	mov	ip, r2
 80027c2:	44bc      	add	ip, r7
 80027c4:	4463      	add	r3, ip
 80027c6:	2204      	movs	r2, #4
 80027c8:	701a      	strb	r2, [r3, #0]
 80027ca:	e05e      	b.n	800288a <UART_SetConfig+0x216>
 80027cc:	231b      	movs	r3, #27
 80027ce:	2218      	movs	r2, #24
 80027d0:	4694      	mov	ip, r2
 80027d2:	44bc      	add	ip, r7
 80027d4:	4463      	add	r3, ip
 80027d6:	2208      	movs	r2, #8
 80027d8:	701a      	strb	r2, [r3, #0]
 80027da:	e056      	b.n	800288a <UART_SetConfig+0x216>
 80027dc:	231b      	movs	r3, #27
 80027de:	2218      	movs	r2, #24
 80027e0:	4694      	mov	ip, r2
 80027e2:	44bc      	add	ip, r7
 80027e4:	4463      	add	r3, ip
 80027e6:	2210      	movs	r2, #16
 80027e8:	701a      	strb	r2, [r3, #0]
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	e04d      	b.n	800288a <UART_SetConfig+0x216>
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a7a      	ldr	r2, [pc, #488]	; (80029dc <UART_SetConfig+0x368>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d141      	bne.n	800287c <UART_SetConfig+0x208>
 80027f8:	4b7b      	ldr	r3, [pc, #492]	; (80029e8 <UART_SetConfig+0x374>)
 80027fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027fc:	23c0      	movs	r3, #192	; 0xc0
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	4013      	ands	r3, r2
 8002802:	2280      	movs	r2, #128	; 0x80
 8002804:	00d2      	lsls	r2, r2, #3
 8002806:	4293      	cmp	r3, r2
 8002808:	d01f      	beq.n	800284a <UART_SetConfig+0x1d6>
 800280a:	2280      	movs	r2, #128	; 0x80
 800280c:	00d2      	lsls	r2, r2, #3
 800280e:	4293      	cmp	r3, r2
 8002810:	d802      	bhi.n	8002818 <UART_SetConfig+0x1a4>
 8002812:	2b00      	cmp	r3, #0
 8002814:	d009      	beq.n	800282a <UART_SetConfig+0x1b6>
 8002816:	e028      	b.n	800286a <UART_SetConfig+0x1f6>
 8002818:	2280      	movs	r2, #128	; 0x80
 800281a:	0112      	lsls	r2, r2, #4
 800281c:	4293      	cmp	r3, r2
 800281e:	d00c      	beq.n	800283a <UART_SetConfig+0x1c6>
 8002820:	22c0      	movs	r2, #192	; 0xc0
 8002822:	0112      	lsls	r2, r2, #4
 8002824:	4293      	cmp	r3, r2
 8002826:	d018      	beq.n	800285a <UART_SetConfig+0x1e6>
 8002828:	e01f      	b.n	800286a <UART_SetConfig+0x1f6>
 800282a:	231b      	movs	r3, #27
 800282c:	2218      	movs	r2, #24
 800282e:	4694      	mov	ip, r2
 8002830:	44bc      	add	ip, r7
 8002832:	4463      	add	r3, ip
 8002834:	2200      	movs	r2, #0
 8002836:	701a      	strb	r2, [r3, #0]
 8002838:	e027      	b.n	800288a <UART_SetConfig+0x216>
 800283a:	231b      	movs	r3, #27
 800283c:	2218      	movs	r2, #24
 800283e:	4694      	mov	ip, r2
 8002840:	44bc      	add	ip, r7
 8002842:	4463      	add	r3, ip
 8002844:	2202      	movs	r2, #2
 8002846:	701a      	strb	r2, [r3, #0]
 8002848:	e01f      	b.n	800288a <UART_SetConfig+0x216>
 800284a:	231b      	movs	r3, #27
 800284c:	2218      	movs	r2, #24
 800284e:	4694      	mov	ip, r2
 8002850:	44bc      	add	ip, r7
 8002852:	4463      	add	r3, ip
 8002854:	2204      	movs	r2, #4
 8002856:	701a      	strb	r2, [r3, #0]
 8002858:	e017      	b.n	800288a <UART_SetConfig+0x216>
 800285a:	231b      	movs	r3, #27
 800285c:	2218      	movs	r2, #24
 800285e:	4694      	mov	ip, r2
 8002860:	44bc      	add	ip, r7
 8002862:	4463      	add	r3, ip
 8002864:	2208      	movs	r2, #8
 8002866:	701a      	strb	r2, [r3, #0]
 8002868:	e00f      	b.n	800288a <UART_SetConfig+0x216>
 800286a:	231b      	movs	r3, #27
 800286c:	2218      	movs	r2, #24
 800286e:	4694      	mov	ip, r2
 8002870:	44bc      	add	ip, r7
 8002872:	4463      	add	r3, ip
 8002874:	2210      	movs	r2, #16
 8002876:	701a      	strb	r2, [r3, #0]
 8002878:	46c0      	nop			; (mov r8, r8)
 800287a:	e006      	b.n	800288a <UART_SetConfig+0x216>
 800287c:	231b      	movs	r3, #27
 800287e:	2218      	movs	r2, #24
 8002880:	4694      	mov	ip, r2
 8002882:	44bc      	add	ip, r7
 8002884:	4463      	add	r3, ip
 8002886:	2210      	movs	r2, #16
 8002888:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a53      	ldr	r2, [pc, #332]	; (80029dc <UART_SetConfig+0x368>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d000      	beq.n	8002896 <UART_SetConfig+0x222>
 8002894:	e085      	b.n	80029a2 <UART_SetConfig+0x32e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002896:	231b      	movs	r3, #27
 8002898:	2218      	movs	r2, #24
 800289a:	4694      	mov	ip, r2
 800289c:	44bc      	add	ip, r7
 800289e:	4463      	add	r3, ip
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d00d      	beq.n	80028c2 <UART_SetConfig+0x24e>
 80028a6:	dc02      	bgt.n	80028ae <UART_SetConfig+0x23a>
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <UART_SetConfig+0x244>
 80028ac:	e01d      	b.n	80028ea <UART_SetConfig+0x276>
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d012      	beq.n	80028d8 <UART_SetConfig+0x264>
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d015      	beq.n	80028e2 <UART_SetConfig+0x26e>
 80028b6:	e018      	b.n	80028ea <UART_SetConfig+0x276>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028b8:	f7ff fbd8 	bl	800206c <HAL_RCC_GetPCLK1Freq>
 80028bc:	0003      	movs	r3, r0
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028c0:	e01d      	b.n	80028fe <UART_SetConfig+0x28a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028c2:	4b49      	ldr	r3, [pc, #292]	; (80029e8 <UART_SetConfig+0x374>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2210      	movs	r2, #16
 80028c8:	4013      	ands	r3, r2
 80028ca:	d002      	beq.n	80028d2 <UART_SetConfig+0x25e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80028cc:	4b48      	ldr	r3, [pc, #288]	; (80029f0 <UART_SetConfig+0x37c>)
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80028d0:	e015      	b.n	80028fe <UART_SetConfig+0x28a>
          pclk = (uint32_t) HSI_VALUE;
 80028d2:	4b48      	ldr	r3, [pc, #288]	; (80029f4 <UART_SetConfig+0x380>)
 80028d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028d6:	e012      	b.n	80028fe <UART_SetConfig+0x28a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028d8:	f7ff fb1c 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 80028dc:	0003      	movs	r3, r0
 80028de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028e0:	e00d      	b.n	80028fe <UART_SetConfig+0x28a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028e2:	2380      	movs	r3, #128	; 0x80
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028e8:	e009      	b.n	80028fe <UART_SetConfig+0x28a>
      default:
        pclk = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80028ee:	231a      	movs	r3, #26
 80028f0:	2218      	movs	r2, #24
 80028f2:	4694      	mov	ip, r2
 80028f4:	44bc      	add	ip, r7
 80028f6:	4463      	add	r3, ip
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
        break;
 80028fc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80028fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002900:	2b00      	cmp	r3, #0
 8002902:	d100      	bne.n	8002906 <UART_SetConfig+0x292>
 8002904:	e139      	b.n	8002b7a <UART_SetConfig+0x506>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	0013      	movs	r3, r2
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	189b      	adds	r3, r3, r2
 8002910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002912:	429a      	cmp	r2, r3
 8002914:	d305      	bcc.n	8002922 <UART_SetConfig+0x2ae>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800291c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800291e:	429a      	cmp	r2, r3
 8002920:	d907      	bls.n	8002932 <UART_SetConfig+0x2be>
      {
        ret = HAL_ERROR;
 8002922:	231a      	movs	r3, #26
 8002924:	2218      	movs	r2, #24
 8002926:	4694      	mov	ip, r2
 8002928:	44bc      	add	ip, r7
 800292a:	4463      	add	r3, ip
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]
 8002930:	e123      	b.n	8002b7a <UART_SetConfig+0x506>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	6939      	ldr	r1, [r7, #16]
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	000b      	movs	r3, r1
 8002940:	0e1b      	lsrs	r3, r3, #24
 8002942:	0010      	movs	r0, r2
 8002944:	0205      	lsls	r5, r0, #8
 8002946:	431d      	orrs	r5, r3
 8002948:	000b      	movs	r3, r1
 800294a:	021c      	lsls	r4, r3, #8
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	085b      	lsrs	r3, r3, #1
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68b8      	ldr	r0, [r7, #8]
 800295a:	68f9      	ldr	r1, [r7, #12]
 800295c:	1900      	adds	r0, r0, r4
 800295e:	4169      	adcs	r1, r5
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	603b      	str	r3, [r7, #0]
 8002966:	2300      	movs	r3, #0
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f7fd fc57 	bl	8000220 <__aeabi_uldivmod>
 8002972:	0003      	movs	r3, r0
 8002974:	000c      	movs	r4, r1
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297a:	4a1f      	ldr	r2, [pc, #124]	; (80029f8 <UART_SetConfig+0x384>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d908      	bls.n	8002992 <UART_SetConfig+0x31e>
 8002980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002982:	4a1e      	ldr	r2, [pc, #120]	; (80029fc <UART_SetConfig+0x388>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d804      	bhi.n	8002992 <UART_SetConfig+0x31e>
        {
          huart->Instance->BRR = usartdiv;
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800298e:	60da      	str	r2, [r3, #12]
 8002990:	e0f3      	b.n	8002b7a <UART_SetConfig+0x506>
        }
        else
        {
          ret = HAL_ERROR;
 8002992:	231a      	movs	r3, #26
 8002994:	2218      	movs	r2, #24
 8002996:	4694      	mov	ip, r2
 8002998:	44bc      	add	ip, r7
 800299a:	4463      	add	r3, ip
 800299c:	2201      	movs	r2, #1
 800299e:	701a      	strb	r2, [r3, #0]
 80029a0:	e0eb      	b.n	8002b7a <UART_SetConfig+0x506>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	69da      	ldr	r2, [r3, #28]
 80029a6:	2380      	movs	r3, #128	; 0x80
 80029a8:	021b      	lsls	r3, r3, #8
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d000      	beq.n	80029b0 <UART_SetConfig+0x33c>
 80029ae:	e08b      	b.n	8002ac8 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 80029b0:	231b      	movs	r3, #27
 80029b2:	2218      	movs	r2, #24
 80029b4:	4694      	mov	ip, r2
 80029b6:	44bc      	add	ip, r7
 80029b8:	4463      	add	r3, ip
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d83a      	bhi.n	8002a36 <UART_SetConfig+0x3c2>
 80029c0:	009a      	lsls	r2, r3, #2
 80029c2:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <UART_SetConfig+0x38c>)
 80029c4:	18d3      	adds	r3, r2, r3
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029ca:	f7ff fb4f 	bl	800206c <HAL_RCC_GetPCLK1Freq>
 80029ce:	0003      	movs	r3, r0
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029d2:	e03a      	b.n	8002a4a <UART_SetConfig+0x3d6>
 80029d4:	efff69f3 	.word	0xefff69f3
 80029d8:	ffffcfff 	.word	0xffffcfff
 80029dc:	40004800 	.word	0x40004800
 80029e0:	fffff4ff 	.word	0xfffff4ff
 80029e4:	40013800 	.word	0x40013800
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40004400 	.word	0x40004400
 80029f0:	003d0900 	.word	0x003d0900
 80029f4:	00f42400 	.word	0x00f42400
 80029f8:	000002ff 	.word	0x000002ff
 80029fc:	000fffff 	.word	0x000fffff
 8002a00:	080038b0 	.word	0x080038b0
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a04:	f7ff fb48 	bl	8002098 <HAL_RCC_GetPCLK2Freq>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a0c:	e01d      	b.n	8002a4a <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a0e:	4b63      	ldr	r3, [pc, #396]	; (8002b9c <UART_SetConfig+0x528>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2210      	movs	r2, #16
 8002a14:	4013      	ands	r3, r2
 8002a16:	d002      	beq.n	8002a1e <UART_SetConfig+0x3aa>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002a18:	4b61      	ldr	r3, [pc, #388]	; (8002ba0 <UART_SetConfig+0x52c>)
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002a1c:	e015      	b.n	8002a4a <UART_SetConfig+0x3d6>
          pclk = (uint32_t) HSI_VALUE;
 8002a1e:	4b61      	ldr	r3, [pc, #388]	; (8002ba4 <UART_SetConfig+0x530>)
 8002a20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a22:	e012      	b.n	8002a4a <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a24:	f7ff fa76 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8002a28:	0003      	movs	r3, r0
 8002a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a2c:	e00d      	b.n	8002a4a <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a2e:	2380      	movs	r3, #128	; 0x80
 8002a30:	021b      	lsls	r3, r3, #8
 8002a32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a34:	e009      	b.n	8002a4a <UART_SetConfig+0x3d6>
      default:
        pclk = 0U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002a3a:	231a      	movs	r3, #26
 8002a3c:	2218      	movs	r2, #24
 8002a3e:	4694      	mov	ip, r2
 8002a40:	44bc      	add	ip, r7
 8002a42:	4463      	add	r3, ip
 8002a44:	2201      	movs	r2, #1
 8002a46:	701a      	strb	r2, [r3, #0]
        break;
 8002a48:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d100      	bne.n	8002a52 <UART_SetConfig+0x3de>
 8002a50:	e093      	b.n	8002b7a <UART_SetConfig+0x506>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a54:	005a      	lsls	r2, r3, #1
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	085b      	lsrs	r3, r3, #1
 8002a5c:	18d2      	adds	r2, r2, r3
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	0019      	movs	r1, r3
 8002a64:	0010      	movs	r0, r2
 8002a66:	f7fd fb4f 	bl	8000108 <__udivsi3>
 8002a6a:	0003      	movs	r3, r0
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a72:	2b0f      	cmp	r3, #15
 8002a74:	d920      	bls.n	8002ab8 <UART_SetConfig+0x444>
 8002a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a78:	4a4b      	ldr	r2, [pc, #300]	; (8002ba8 <UART_SetConfig+0x534>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d81c      	bhi.n	8002ab8 <UART_SetConfig+0x444>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	200e      	movs	r0, #14
 8002a84:	2418      	movs	r4, #24
 8002a86:	193b      	adds	r3, r7, r4
 8002a88:	181b      	adds	r3, r3, r0
 8002a8a:	210f      	movs	r1, #15
 8002a8c:	438a      	bics	r2, r1
 8002a8e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a92:	085b      	lsrs	r3, r3, #1
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2207      	movs	r2, #7
 8002a98:	4013      	ands	r3, r2
 8002a9a:	b299      	uxth	r1, r3
 8002a9c:	193b      	adds	r3, r7, r4
 8002a9e:	181b      	adds	r3, r3, r0
 8002aa0:	193a      	adds	r2, r7, r4
 8002aa2:	1812      	adds	r2, r2, r0
 8002aa4:	8812      	ldrh	r2, [r2, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	193a      	adds	r2, r7, r4
 8002ab0:	1812      	adds	r2, r2, r0
 8002ab2:	8812      	ldrh	r2, [r2, #0]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	e060      	b.n	8002b7a <UART_SetConfig+0x506>
      }
      else
      {
        ret = HAL_ERROR;
 8002ab8:	231a      	movs	r3, #26
 8002aba:	2218      	movs	r2, #24
 8002abc:	4694      	mov	ip, r2
 8002abe:	44bc      	add	ip, r7
 8002ac0:	4463      	add	r3, ip
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	701a      	strb	r2, [r3, #0]
 8002ac6:	e058      	b.n	8002b7a <UART_SetConfig+0x506>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ac8:	231b      	movs	r3, #27
 8002aca:	2218      	movs	r2, #24
 8002acc:	4694      	mov	ip, r2
 8002ace:	44bc      	add	ip, r7
 8002ad0:	4463      	add	r3, ip
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d822      	bhi.n	8002b1e <UART_SetConfig+0x4aa>
 8002ad8:	009a      	lsls	r2, r3, #2
 8002ada:	4b34      	ldr	r3, [pc, #208]	; (8002bac <UART_SetConfig+0x538>)
 8002adc:	18d3      	adds	r3, r2, r3
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ae2:	f7ff fac3 	bl	800206c <HAL_RCC_GetPCLK1Freq>
 8002ae6:	0003      	movs	r3, r0
 8002ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002aea:	e022      	b.n	8002b32 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002aec:	f7ff fad4 	bl	8002098 <HAL_RCC_GetPCLK2Freq>
 8002af0:	0003      	movs	r3, r0
 8002af2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002af4:	e01d      	b.n	8002b32 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002af6:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <UART_SetConfig+0x528>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2210      	movs	r2, #16
 8002afc:	4013      	ands	r3, r2
 8002afe:	d002      	beq.n	8002b06 <UART_SetConfig+0x492>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002b00:	4b27      	ldr	r3, [pc, #156]	; (8002ba0 <UART_SetConfig+0x52c>)
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002b04:	e015      	b.n	8002b32 <UART_SetConfig+0x4be>
          pclk = (uint32_t) HSI_VALUE;
 8002b06:	4b27      	ldr	r3, [pc, #156]	; (8002ba4 <UART_SetConfig+0x530>)
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b0a:	e012      	b.n	8002b32 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b0c:	f7ff fa02 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8002b10:	0003      	movs	r3, r0
 8002b12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b14:	e00d      	b.n	8002b32 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	021b      	lsls	r3, r3, #8
 8002b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b1c:	e009      	b.n	8002b32 <UART_SetConfig+0x4be>
      default:
        pclk = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002b22:	231a      	movs	r3, #26
 8002b24:	2218      	movs	r2, #24
 8002b26:	4694      	mov	ip, r2
 8002b28:	44bc      	add	ip, r7
 8002b2a:	4463      	add	r3, ip
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	701a      	strb	r2, [r3, #0]
        break;
 8002b30:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d020      	beq.n	8002b7a <UART_SetConfig+0x506>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	085a      	lsrs	r2, r3, #1
 8002b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b40:	18d2      	adds	r2, r2, r3
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	0019      	movs	r1, r3
 8002b48:	0010      	movs	r0, r2
 8002b4a:	f7fd fadd 	bl	8000108 <__udivsi3>
 8002b4e:	0003      	movs	r3, r0
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b56:	2b0f      	cmp	r3, #15
 8002b58:	d908      	bls.n	8002b6c <UART_SetConfig+0x4f8>
 8002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5c:	4a12      	ldr	r2, [pc, #72]	; (8002ba8 <UART_SetConfig+0x534>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d804      	bhi.n	8002b6c <UART_SetConfig+0x4f8>
      {
        huart->Instance->BRR = usartdiv;
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b68:	60da      	str	r2, [r3, #12]
 8002b6a:	e006      	b.n	8002b7a <UART_SetConfig+0x506>
      }
      else
      {
        ret = HAL_ERROR;
 8002b6c:	231a      	movs	r3, #26
 8002b6e:	2218      	movs	r2, #24
 8002b70:	4694      	mov	ip, r2
 8002b72:	44bc      	add	ip, r7
 8002b74:	4463      	add	r3, ip
 8002b76:	2201      	movs	r2, #1
 8002b78:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	2200      	movs	r2, #0
 8002b84:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002b86:	231a      	movs	r3, #26
 8002b88:	2218      	movs	r2, #24
 8002b8a:	4694      	mov	ip, r2
 8002b8c:	44bc      	add	ip, r7
 8002b8e:	4463      	add	r3, ip
 8002b90:	781b      	ldrb	r3, [r3, #0]
}
 8002b92:	0018      	movs	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	b00e      	add	sp, #56	; 0x38
 8002b98:	bdb0      	pop	{r4, r5, r7, pc}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	003d0900 	.word	0x003d0900
 8002ba4:	00f42400 	.word	0x00f42400
 8002ba8:	0000ffff 	.word	0x0000ffff
 8002bac:	080038d4 	.word	0x080038d4

08002bb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d00b      	beq.n	8002bda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4a4a      	ldr	r2, [pc, #296]	; (8002cf4 <UART_AdvFeatureConfig+0x144>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	0019      	movs	r1, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	2202      	movs	r2, #2
 8002be0:	4013      	ands	r3, r2
 8002be2:	d00b      	beq.n	8002bfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	4a43      	ldr	r2, [pc, #268]	; (8002cf8 <UART_AdvFeatureConfig+0x148>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	0019      	movs	r1, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	2204      	movs	r2, #4
 8002c02:	4013      	ands	r3, r2
 8002c04:	d00b      	beq.n	8002c1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	4a3b      	ldr	r2, [pc, #236]	; (8002cfc <UART_AdvFeatureConfig+0x14c>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	0019      	movs	r1, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	2208      	movs	r2, #8
 8002c24:	4013      	ands	r3, r2
 8002c26:	d00b      	beq.n	8002c40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	4a34      	ldr	r2, [pc, #208]	; (8002d00 <UART_AdvFeatureConfig+0x150>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	0019      	movs	r1, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	2210      	movs	r2, #16
 8002c46:	4013      	ands	r3, r2
 8002c48:	d00b      	beq.n	8002c62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	4a2c      	ldr	r2, [pc, #176]	; (8002d04 <UART_AdvFeatureConfig+0x154>)
 8002c52:	4013      	ands	r3, r2
 8002c54:	0019      	movs	r1, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	2220      	movs	r2, #32
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d00b      	beq.n	8002c84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	4a25      	ldr	r2, [pc, #148]	; (8002d08 <UART_AdvFeatureConfig+0x158>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	0019      	movs	r1, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	2240      	movs	r2, #64	; 0x40
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d01d      	beq.n	8002cca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	4a1d      	ldr	r2, [pc, #116]	; (8002d0c <UART_AdvFeatureConfig+0x15c>)
 8002c96:	4013      	ands	r3, r2
 8002c98:	0019      	movs	r1, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002caa:	2380      	movs	r3, #128	; 0x80
 8002cac:	035b      	lsls	r3, r3, #13
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d10b      	bne.n	8002cca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	4a15      	ldr	r2, [pc, #84]	; (8002d10 <UART_AdvFeatureConfig+0x160>)
 8002cba:	4013      	ands	r3, r2
 8002cbc:	0019      	movs	r1, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	2280      	movs	r2, #128	; 0x80
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d00b      	beq.n	8002cec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	4a0e      	ldr	r2, [pc, #56]	; (8002d14 <UART_AdvFeatureConfig+0x164>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	0019      	movs	r1, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	605a      	str	r2, [r3, #4]
  }
}
 8002cec:	46c0      	nop			; (mov r8, r8)
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b002      	add	sp, #8
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	fffdffff 	.word	0xfffdffff
 8002cf8:	fffeffff 	.word	0xfffeffff
 8002cfc:	fffbffff 	.word	0xfffbffff
 8002d00:	ffff7fff 	.word	0xffff7fff
 8002d04:	ffffefff 	.word	0xffffefff
 8002d08:	ffffdfff 	.word	0xffffdfff
 8002d0c:	ffefffff 	.word	0xffefffff
 8002d10:	ff9fffff 	.word	0xff9fffff
 8002d14:	fff7ffff 	.word	0xfff7ffff

08002d18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2280      	movs	r2, #128	; 0x80
 8002d24:	2100      	movs	r1, #0
 8002d26:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d28:	f7fe f842 	bl	8000db0 <HAL_GetTick>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2208      	movs	r2, #8
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d10d      	bne.n	8002d5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	0399      	lsls	r1, r3, #14
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	4b18      	ldr	r3, [pc, #96]	; (8002da8 <UART_CheckIdleState+0x90>)
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	0013      	movs	r3, r2
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f000 f82d 	bl	8002dac <UART_WaitOnFlagUntilTimeout>
 8002d52:	1e03      	subs	r3, r0, #0
 8002d54:	d001      	beq.n	8002d5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e022      	b.n	8002da0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2204      	movs	r2, #4
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	d10d      	bne.n	8002d84 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	2380      	movs	r3, #128	; 0x80
 8002d6c:	03d9      	lsls	r1, r3, #15
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	4b0d      	ldr	r3, [pc, #52]	; (8002da8 <UART_CheckIdleState+0x90>)
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	0013      	movs	r3, r2
 8002d76:	2200      	movs	r2, #0
 8002d78:	f000 f818 	bl	8002dac <UART_WaitOnFlagUntilTimeout>
 8002d7c:	1e03      	subs	r3, r0, #0
 8002d7e:	d001      	beq.n	8002d84 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e00d      	b.n	8002da0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2220      	movs	r2, #32
 8002d88:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2274      	movs	r2, #116	; 0x74
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	0018      	movs	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	b004      	add	sp, #16
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	01ffffff 	.word	0x01ffffff

08002dac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	1dfb      	adds	r3, r7, #7
 8002dba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dbc:	e05e      	b.n	8002e7c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	d05b      	beq.n	8002e7c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc4:	f7fd fff4 	bl	8000db0 <HAL_GetTick>
 8002dc8:	0002      	movs	r2, r0
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d302      	bcc.n	8002dda <UART_WaitOnFlagUntilTimeout+0x2e>
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d11b      	bne.n	8002e12 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	492f      	ldr	r1, [pc, #188]	; (8002ea4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002de6:	400a      	ands	r2, r1
 8002de8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2101      	movs	r1, #1
 8002df6:	438a      	bics	r2, r1
 8002df8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2274      	movs	r2, #116	; 0x74
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e044      	b.n	8002e9c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2204      	movs	r2, #4
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d02e      	beq.n	8002e7c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69da      	ldr	r2, [r3, #28]
 8002e24:	2380      	movs	r3, #128	; 0x80
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	401a      	ands	r2, r3
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d124      	bne.n	8002e7c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2280      	movs	r2, #128	; 0x80
 8002e38:	0112      	lsls	r2, r2, #4
 8002e3a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4917      	ldr	r1, [pc, #92]	; (8002ea4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002e48:	400a      	ands	r2, r1
 8002e4a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2101      	movs	r1, #1
 8002e58:	438a      	bics	r2, r1
 8002e5a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2220      	movs	r2, #32
 8002e66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2280      	movs	r2, #128	; 0x80
 8002e6c:	2120      	movs	r1, #32
 8002e6e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2274      	movs	r2, #116	; 0x74
 8002e74:	2100      	movs	r1, #0
 8002e76:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e00f      	b.n	8002e9c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	4013      	ands	r3, r2
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	425a      	negs	r2, r3
 8002e8c:	4153      	adcs	r3, r2
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	001a      	movs	r2, r3
 8002e92:	1dfb      	adds	r3, r7, #7
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d091      	beq.n	8002dbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b004      	add	sp, #16
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	fffffe5f 	.word	0xfffffe5f

08002ea8 <__errno>:
 8002ea8:	4b01      	ldr	r3, [pc, #4]	; (8002eb0 <__errno+0x8>)
 8002eaa:	6818      	ldr	r0, [r3, #0]
 8002eac:	4770      	bx	lr
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	2000000c 	.word	0x2000000c

08002eb4 <__libc_init_array>:
 8002eb4:	b570      	push	{r4, r5, r6, lr}
 8002eb6:	2600      	movs	r6, #0
 8002eb8:	4d0c      	ldr	r5, [pc, #48]	; (8002eec <__libc_init_array+0x38>)
 8002eba:	4c0d      	ldr	r4, [pc, #52]	; (8002ef0 <__libc_init_array+0x3c>)
 8002ebc:	1b64      	subs	r4, r4, r5
 8002ebe:	10a4      	asrs	r4, r4, #2
 8002ec0:	42a6      	cmp	r6, r4
 8002ec2:	d109      	bne.n	8002ed8 <__libc_init_array+0x24>
 8002ec4:	2600      	movs	r6, #0
 8002ec6:	f000 fcc9 	bl	800385c <_init>
 8002eca:	4d0a      	ldr	r5, [pc, #40]	; (8002ef4 <__libc_init_array+0x40>)
 8002ecc:	4c0a      	ldr	r4, [pc, #40]	; (8002ef8 <__libc_init_array+0x44>)
 8002ece:	1b64      	subs	r4, r4, r5
 8002ed0:	10a4      	asrs	r4, r4, #2
 8002ed2:	42a6      	cmp	r6, r4
 8002ed4:	d105      	bne.n	8002ee2 <__libc_init_array+0x2e>
 8002ed6:	bd70      	pop	{r4, r5, r6, pc}
 8002ed8:	00b3      	lsls	r3, r6, #2
 8002eda:	58eb      	ldr	r3, [r5, r3]
 8002edc:	4798      	blx	r3
 8002ede:	3601      	adds	r6, #1
 8002ee0:	e7ee      	b.n	8002ec0 <__libc_init_array+0xc>
 8002ee2:	00b3      	lsls	r3, r6, #2
 8002ee4:	58eb      	ldr	r3, [r5, r3]
 8002ee6:	4798      	blx	r3
 8002ee8:	3601      	adds	r6, #1
 8002eea:	e7f2      	b.n	8002ed2 <__libc_init_array+0x1e>
 8002eec:	08003964 	.word	0x08003964
 8002ef0:	08003964 	.word	0x08003964
 8002ef4:	08003964 	.word	0x08003964
 8002ef8:	08003968 	.word	0x08003968

08002efc <memset>:
 8002efc:	0003      	movs	r3, r0
 8002efe:	1812      	adds	r2, r2, r0
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d100      	bne.n	8002f06 <memset+0xa>
 8002f04:	4770      	bx	lr
 8002f06:	7019      	strb	r1, [r3, #0]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	e7f9      	b.n	8002f00 <memset+0x4>

08002f0c <_puts_r>:
 8002f0c:	b570      	push	{r4, r5, r6, lr}
 8002f0e:	0005      	movs	r5, r0
 8002f10:	000e      	movs	r6, r1
 8002f12:	2800      	cmp	r0, #0
 8002f14:	d004      	beq.n	8002f20 <_puts_r+0x14>
 8002f16:	6983      	ldr	r3, [r0, #24]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <_puts_r+0x14>
 8002f1c:	f000 fa24 	bl	8003368 <__sinit>
 8002f20:	69ab      	ldr	r3, [r5, #24]
 8002f22:	68ac      	ldr	r4, [r5, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d102      	bne.n	8002f2e <_puts_r+0x22>
 8002f28:	0028      	movs	r0, r5
 8002f2a:	f000 fa1d 	bl	8003368 <__sinit>
 8002f2e:	4b24      	ldr	r3, [pc, #144]	; (8002fc0 <_puts_r+0xb4>)
 8002f30:	429c      	cmp	r4, r3
 8002f32:	d10f      	bne.n	8002f54 <_puts_r+0x48>
 8002f34:	686c      	ldr	r4, [r5, #4]
 8002f36:	89a3      	ldrh	r3, [r4, #12]
 8002f38:	071b      	lsls	r3, r3, #28
 8002f3a:	d502      	bpl.n	8002f42 <_puts_r+0x36>
 8002f3c:	6923      	ldr	r3, [r4, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d11f      	bne.n	8002f82 <_puts_r+0x76>
 8002f42:	0021      	movs	r1, r4
 8002f44:	0028      	movs	r0, r5
 8002f46:	f000 f8a1 	bl	800308c <__swsetup_r>
 8002f4a:	2800      	cmp	r0, #0
 8002f4c:	d019      	beq.n	8002f82 <_puts_r+0x76>
 8002f4e:	2001      	movs	r0, #1
 8002f50:	4240      	negs	r0, r0
 8002f52:	bd70      	pop	{r4, r5, r6, pc}
 8002f54:	4b1b      	ldr	r3, [pc, #108]	; (8002fc4 <_puts_r+0xb8>)
 8002f56:	429c      	cmp	r4, r3
 8002f58:	d101      	bne.n	8002f5e <_puts_r+0x52>
 8002f5a:	68ac      	ldr	r4, [r5, #8]
 8002f5c:	e7eb      	b.n	8002f36 <_puts_r+0x2a>
 8002f5e:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <_puts_r+0xbc>)
 8002f60:	429c      	cmp	r4, r3
 8002f62:	d1e8      	bne.n	8002f36 <_puts_r+0x2a>
 8002f64:	68ec      	ldr	r4, [r5, #12]
 8002f66:	e7e6      	b.n	8002f36 <_puts_r+0x2a>
 8002f68:	3601      	adds	r6, #1
 8002f6a:	60a3      	str	r3, [r4, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	da04      	bge.n	8002f7a <_puts_r+0x6e>
 8002f70:	69a2      	ldr	r2, [r4, #24]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	dc16      	bgt.n	8002fa4 <_puts_r+0x98>
 8002f76:	290a      	cmp	r1, #10
 8002f78:	d014      	beq.n	8002fa4 <_puts_r+0x98>
 8002f7a:	6823      	ldr	r3, [r4, #0]
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	6022      	str	r2, [r4, #0]
 8002f80:	7019      	strb	r1, [r3, #0]
 8002f82:	68a3      	ldr	r3, [r4, #8]
 8002f84:	7831      	ldrb	r1, [r6, #0]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	2900      	cmp	r1, #0
 8002f8a:	d1ed      	bne.n	8002f68 <_puts_r+0x5c>
 8002f8c:	60a3      	str	r3, [r4, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	da0f      	bge.n	8002fb2 <_puts_r+0xa6>
 8002f92:	0022      	movs	r2, r4
 8002f94:	310a      	adds	r1, #10
 8002f96:	0028      	movs	r0, r5
 8002f98:	f000 f822 	bl	8002fe0 <__swbuf_r>
 8002f9c:	1c43      	adds	r3, r0, #1
 8002f9e:	d0d6      	beq.n	8002f4e <_puts_r+0x42>
 8002fa0:	200a      	movs	r0, #10
 8002fa2:	e7d6      	b.n	8002f52 <_puts_r+0x46>
 8002fa4:	0022      	movs	r2, r4
 8002fa6:	0028      	movs	r0, r5
 8002fa8:	f000 f81a 	bl	8002fe0 <__swbuf_r>
 8002fac:	1c43      	adds	r3, r0, #1
 8002fae:	d1e8      	bne.n	8002f82 <_puts_r+0x76>
 8002fb0:	e7cd      	b.n	8002f4e <_puts_r+0x42>
 8002fb2:	200a      	movs	r0, #10
 8002fb4:	6823      	ldr	r3, [r4, #0]
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	6022      	str	r2, [r4, #0]
 8002fba:	7018      	strb	r0, [r3, #0]
 8002fbc:	e7c9      	b.n	8002f52 <_puts_r+0x46>
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	0800391c 	.word	0x0800391c
 8002fc4:	0800393c 	.word	0x0800393c
 8002fc8:	080038fc 	.word	0x080038fc

08002fcc <puts>:
 8002fcc:	b510      	push	{r4, lr}
 8002fce:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <puts+0x10>)
 8002fd0:	0001      	movs	r1, r0
 8002fd2:	6818      	ldr	r0, [r3, #0]
 8002fd4:	f7ff ff9a 	bl	8002f0c <_puts_r>
 8002fd8:	bd10      	pop	{r4, pc}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	2000000c 	.word	0x2000000c

08002fe0 <__swbuf_r>:
 8002fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fe2:	0005      	movs	r5, r0
 8002fe4:	000e      	movs	r6, r1
 8002fe6:	0014      	movs	r4, r2
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	d004      	beq.n	8002ff6 <__swbuf_r+0x16>
 8002fec:	6983      	ldr	r3, [r0, #24]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <__swbuf_r+0x16>
 8002ff2:	f000 f9b9 	bl	8003368 <__sinit>
 8002ff6:	4b22      	ldr	r3, [pc, #136]	; (8003080 <__swbuf_r+0xa0>)
 8002ff8:	429c      	cmp	r4, r3
 8002ffa:	d12d      	bne.n	8003058 <__swbuf_r+0x78>
 8002ffc:	686c      	ldr	r4, [r5, #4]
 8002ffe:	69a3      	ldr	r3, [r4, #24]
 8003000:	60a3      	str	r3, [r4, #8]
 8003002:	89a3      	ldrh	r3, [r4, #12]
 8003004:	071b      	lsls	r3, r3, #28
 8003006:	d531      	bpl.n	800306c <__swbuf_r+0x8c>
 8003008:	6923      	ldr	r3, [r4, #16]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d02e      	beq.n	800306c <__swbuf_r+0x8c>
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	6922      	ldr	r2, [r4, #16]
 8003012:	b2f7      	uxtb	r7, r6
 8003014:	1a98      	subs	r0, r3, r2
 8003016:	6963      	ldr	r3, [r4, #20]
 8003018:	b2f6      	uxtb	r6, r6
 800301a:	4283      	cmp	r3, r0
 800301c:	dc05      	bgt.n	800302a <__swbuf_r+0x4a>
 800301e:	0021      	movs	r1, r4
 8003020:	0028      	movs	r0, r5
 8003022:	f000 f933 	bl	800328c <_fflush_r>
 8003026:	2800      	cmp	r0, #0
 8003028:	d126      	bne.n	8003078 <__swbuf_r+0x98>
 800302a:	68a3      	ldr	r3, [r4, #8]
 800302c:	3001      	adds	r0, #1
 800302e:	3b01      	subs	r3, #1
 8003030:	60a3      	str	r3, [r4, #8]
 8003032:	6823      	ldr	r3, [r4, #0]
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	6022      	str	r2, [r4, #0]
 8003038:	701f      	strb	r7, [r3, #0]
 800303a:	6963      	ldr	r3, [r4, #20]
 800303c:	4283      	cmp	r3, r0
 800303e:	d004      	beq.n	800304a <__swbuf_r+0x6a>
 8003040:	89a3      	ldrh	r3, [r4, #12]
 8003042:	07db      	lsls	r3, r3, #31
 8003044:	d51a      	bpl.n	800307c <__swbuf_r+0x9c>
 8003046:	2e0a      	cmp	r6, #10
 8003048:	d118      	bne.n	800307c <__swbuf_r+0x9c>
 800304a:	0021      	movs	r1, r4
 800304c:	0028      	movs	r0, r5
 800304e:	f000 f91d 	bl	800328c <_fflush_r>
 8003052:	2800      	cmp	r0, #0
 8003054:	d012      	beq.n	800307c <__swbuf_r+0x9c>
 8003056:	e00f      	b.n	8003078 <__swbuf_r+0x98>
 8003058:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <__swbuf_r+0xa4>)
 800305a:	429c      	cmp	r4, r3
 800305c:	d101      	bne.n	8003062 <__swbuf_r+0x82>
 800305e:	68ac      	ldr	r4, [r5, #8]
 8003060:	e7cd      	b.n	8002ffe <__swbuf_r+0x1e>
 8003062:	4b09      	ldr	r3, [pc, #36]	; (8003088 <__swbuf_r+0xa8>)
 8003064:	429c      	cmp	r4, r3
 8003066:	d1ca      	bne.n	8002ffe <__swbuf_r+0x1e>
 8003068:	68ec      	ldr	r4, [r5, #12]
 800306a:	e7c8      	b.n	8002ffe <__swbuf_r+0x1e>
 800306c:	0021      	movs	r1, r4
 800306e:	0028      	movs	r0, r5
 8003070:	f000 f80c 	bl	800308c <__swsetup_r>
 8003074:	2800      	cmp	r0, #0
 8003076:	d0ca      	beq.n	800300e <__swbuf_r+0x2e>
 8003078:	2601      	movs	r6, #1
 800307a:	4276      	negs	r6, r6
 800307c:	0030      	movs	r0, r6
 800307e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003080:	0800391c 	.word	0x0800391c
 8003084:	0800393c 	.word	0x0800393c
 8003088:	080038fc 	.word	0x080038fc

0800308c <__swsetup_r>:
 800308c:	4b36      	ldr	r3, [pc, #216]	; (8003168 <__swsetup_r+0xdc>)
 800308e:	b570      	push	{r4, r5, r6, lr}
 8003090:	681d      	ldr	r5, [r3, #0]
 8003092:	0006      	movs	r6, r0
 8003094:	000c      	movs	r4, r1
 8003096:	2d00      	cmp	r5, #0
 8003098:	d005      	beq.n	80030a6 <__swsetup_r+0x1a>
 800309a:	69ab      	ldr	r3, [r5, #24]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d102      	bne.n	80030a6 <__swsetup_r+0x1a>
 80030a0:	0028      	movs	r0, r5
 80030a2:	f000 f961 	bl	8003368 <__sinit>
 80030a6:	4b31      	ldr	r3, [pc, #196]	; (800316c <__swsetup_r+0xe0>)
 80030a8:	429c      	cmp	r4, r3
 80030aa:	d10f      	bne.n	80030cc <__swsetup_r+0x40>
 80030ac:	686c      	ldr	r4, [r5, #4]
 80030ae:	230c      	movs	r3, #12
 80030b0:	5ee2      	ldrsh	r2, [r4, r3]
 80030b2:	b293      	uxth	r3, r2
 80030b4:	0719      	lsls	r1, r3, #28
 80030b6:	d42d      	bmi.n	8003114 <__swsetup_r+0x88>
 80030b8:	06d9      	lsls	r1, r3, #27
 80030ba:	d411      	bmi.n	80030e0 <__swsetup_r+0x54>
 80030bc:	2309      	movs	r3, #9
 80030be:	2001      	movs	r0, #1
 80030c0:	6033      	str	r3, [r6, #0]
 80030c2:	3337      	adds	r3, #55	; 0x37
 80030c4:	4313      	orrs	r3, r2
 80030c6:	81a3      	strh	r3, [r4, #12]
 80030c8:	4240      	negs	r0, r0
 80030ca:	bd70      	pop	{r4, r5, r6, pc}
 80030cc:	4b28      	ldr	r3, [pc, #160]	; (8003170 <__swsetup_r+0xe4>)
 80030ce:	429c      	cmp	r4, r3
 80030d0:	d101      	bne.n	80030d6 <__swsetup_r+0x4a>
 80030d2:	68ac      	ldr	r4, [r5, #8]
 80030d4:	e7eb      	b.n	80030ae <__swsetup_r+0x22>
 80030d6:	4b27      	ldr	r3, [pc, #156]	; (8003174 <__swsetup_r+0xe8>)
 80030d8:	429c      	cmp	r4, r3
 80030da:	d1e8      	bne.n	80030ae <__swsetup_r+0x22>
 80030dc:	68ec      	ldr	r4, [r5, #12]
 80030de:	e7e6      	b.n	80030ae <__swsetup_r+0x22>
 80030e0:	075b      	lsls	r3, r3, #29
 80030e2:	d513      	bpl.n	800310c <__swsetup_r+0x80>
 80030e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030e6:	2900      	cmp	r1, #0
 80030e8:	d008      	beq.n	80030fc <__swsetup_r+0x70>
 80030ea:	0023      	movs	r3, r4
 80030ec:	3344      	adds	r3, #68	; 0x44
 80030ee:	4299      	cmp	r1, r3
 80030f0:	d002      	beq.n	80030f8 <__swsetup_r+0x6c>
 80030f2:	0030      	movs	r0, r6
 80030f4:	f000 fa38 	bl	8003568 <_free_r>
 80030f8:	2300      	movs	r3, #0
 80030fa:	6363      	str	r3, [r4, #52]	; 0x34
 80030fc:	2224      	movs	r2, #36	; 0x24
 80030fe:	89a3      	ldrh	r3, [r4, #12]
 8003100:	4393      	bics	r3, r2
 8003102:	81a3      	strh	r3, [r4, #12]
 8003104:	2300      	movs	r3, #0
 8003106:	6063      	str	r3, [r4, #4]
 8003108:	6923      	ldr	r3, [r4, #16]
 800310a:	6023      	str	r3, [r4, #0]
 800310c:	2308      	movs	r3, #8
 800310e:	89a2      	ldrh	r2, [r4, #12]
 8003110:	4313      	orrs	r3, r2
 8003112:	81a3      	strh	r3, [r4, #12]
 8003114:	6923      	ldr	r3, [r4, #16]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10b      	bne.n	8003132 <__swsetup_r+0xa6>
 800311a:	21a0      	movs	r1, #160	; 0xa0
 800311c:	2280      	movs	r2, #128	; 0x80
 800311e:	89a3      	ldrh	r3, [r4, #12]
 8003120:	0089      	lsls	r1, r1, #2
 8003122:	0092      	lsls	r2, r2, #2
 8003124:	400b      	ands	r3, r1
 8003126:	4293      	cmp	r3, r2
 8003128:	d003      	beq.n	8003132 <__swsetup_r+0xa6>
 800312a:	0021      	movs	r1, r4
 800312c:	0030      	movs	r0, r6
 800312e:	f000 f9d7 	bl	80034e0 <__smakebuf_r>
 8003132:	2301      	movs	r3, #1
 8003134:	89a2      	ldrh	r2, [r4, #12]
 8003136:	4013      	ands	r3, r2
 8003138:	d011      	beq.n	800315e <__swsetup_r+0xd2>
 800313a:	2300      	movs	r3, #0
 800313c:	60a3      	str	r3, [r4, #8]
 800313e:	6963      	ldr	r3, [r4, #20]
 8003140:	425b      	negs	r3, r3
 8003142:	61a3      	str	r3, [r4, #24]
 8003144:	2000      	movs	r0, #0
 8003146:	6923      	ldr	r3, [r4, #16]
 8003148:	4283      	cmp	r3, r0
 800314a:	d1be      	bne.n	80030ca <__swsetup_r+0x3e>
 800314c:	230c      	movs	r3, #12
 800314e:	5ee2      	ldrsh	r2, [r4, r3]
 8003150:	0613      	lsls	r3, r2, #24
 8003152:	d5ba      	bpl.n	80030ca <__swsetup_r+0x3e>
 8003154:	2340      	movs	r3, #64	; 0x40
 8003156:	4313      	orrs	r3, r2
 8003158:	81a3      	strh	r3, [r4, #12]
 800315a:	3801      	subs	r0, #1
 800315c:	e7b5      	b.n	80030ca <__swsetup_r+0x3e>
 800315e:	0792      	lsls	r2, r2, #30
 8003160:	d400      	bmi.n	8003164 <__swsetup_r+0xd8>
 8003162:	6963      	ldr	r3, [r4, #20]
 8003164:	60a3      	str	r3, [r4, #8]
 8003166:	e7ed      	b.n	8003144 <__swsetup_r+0xb8>
 8003168:	2000000c 	.word	0x2000000c
 800316c:	0800391c 	.word	0x0800391c
 8003170:	0800393c 	.word	0x0800393c
 8003174:	080038fc 	.word	0x080038fc

08003178 <__sflush_r>:
 8003178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800317a:	898a      	ldrh	r2, [r1, #12]
 800317c:	0005      	movs	r5, r0
 800317e:	000c      	movs	r4, r1
 8003180:	0713      	lsls	r3, r2, #28
 8003182:	d460      	bmi.n	8003246 <__sflush_r+0xce>
 8003184:	684b      	ldr	r3, [r1, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	dc04      	bgt.n	8003194 <__sflush_r+0x1c>
 800318a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800318c:	2b00      	cmp	r3, #0
 800318e:	dc01      	bgt.n	8003194 <__sflush_r+0x1c>
 8003190:	2000      	movs	r0, #0
 8003192:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003194:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003196:	2f00      	cmp	r7, #0
 8003198:	d0fa      	beq.n	8003190 <__sflush_r+0x18>
 800319a:	2300      	movs	r3, #0
 800319c:	682e      	ldr	r6, [r5, #0]
 800319e:	602b      	str	r3, [r5, #0]
 80031a0:	2380      	movs	r3, #128	; 0x80
 80031a2:	015b      	lsls	r3, r3, #5
 80031a4:	6a21      	ldr	r1, [r4, #32]
 80031a6:	401a      	ands	r2, r3
 80031a8:	d034      	beq.n	8003214 <__sflush_r+0x9c>
 80031aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031ac:	89a3      	ldrh	r3, [r4, #12]
 80031ae:	075b      	lsls	r3, r3, #29
 80031b0:	d506      	bpl.n	80031c0 <__sflush_r+0x48>
 80031b2:	6863      	ldr	r3, [r4, #4]
 80031b4:	1ac0      	subs	r0, r0, r3
 80031b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <__sflush_r+0x48>
 80031bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031be:	1ac0      	subs	r0, r0, r3
 80031c0:	0002      	movs	r2, r0
 80031c2:	6a21      	ldr	r1, [r4, #32]
 80031c4:	2300      	movs	r3, #0
 80031c6:	0028      	movs	r0, r5
 80031c8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80031ca:	47b8      	blx	r7
 80031cc:	89a1      	ldrh	r1, [r4, #12]
 80031ce:	1c43      	adds	r3, r0, #1
 80031d0:	d106      	bne.n	80031e0 <__sflush_r+0x68>
 80031d2:	682b      	ldr	r3, [r5, #0]
 80031d4:	2b1d      	cmp	r3, #29
 80031d6:	d830      	bhi.n	800323a <__sflush_r+0xc2>
 80031d8:	4a2b      	ldr	r2, [pc, #172]	; (8003288 <__sflush_r+0x110>)
 80031da:	40da      	lsrs	r2, r3
 80031dc:	07d3      	lsls	r3, r2, #31
 80031de:	d52c      	bpl.n	800323a <__sflush_r+0xc2>
 80031e0:	2300      	movs	r3, #0
 80031e2:	6063      	str	r3, [r4, #4]
 80031e4:	6923      	ldr	r3, [r4, #16]
 80031e6:	6023      	str	r3, [r4, #0]
 80031e8:	04cb      	lsls	r3, r1, #19
 80031ea:	d505      	bpl.n	80031f8 <__sflush_r+0x80>
 80031ec:	1c43      	adds	r3, r0, #1
 80031ee:	d102      	bne.n	80031f6 <__sflush_r+0x7e>
 80031f0:	682b      	ldr	r3, [r5, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d100      	bne.n	80031f8 <__sflush_r+0x80>
 80031f6:	6560      	str	r0, [r4, #84]	; 0x54
 80031f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031fa:	602e      	str	r6, [r5, #0]
 80031fc:	2900      	cmp	r1, #0
 80031fe:	d0c7      	beq.n	8003190 <__sflush_r+0x18>
 8003200:	0023      	movs	r3, r4
 8003202:	3344      	adds	r3, #68	; 0x44
 8003204:	4299      	cmp	r1, r3
 8003206:	d002      	beq.n	800320e <__sflush_r+0x96>
 8003208:	0028      	movs	r0, r5
 800320a:	f000 f9ad 	bl	8003568 <_free_r>
 800320e:	2000      	movs	r0, #0
 8003210:	6360      	str	r0, [r4, #52]	; 0x34
 8003212:	e7be      	b.n	8003192 <__sflush_r+0x1a>
 8003214:	2301      	movs	r3, #1
 8003216:	0028      	movs	r0, r5
 8003218:	47b8      	blx	r7
 800321a:	1c43      	adds	r3, r0, #1
 800321c:	d1c6      	bne.n	80031ac <__sflush_r+0x34>
 800321e:	682b      	ldr	r3, [r5, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0c3      	beq.n	80031ac <__sflush_r+0x34>
 8003224:	2b1d      	cmp	r3, #29
 8003226:	d001      	beq.n	800322c <__sflush_r+0xb4>
 8003228:	2b16      	cmp	r3, #22
 800322a:	d101      	bne.n	8003230 <__sflush_r+0xb8>
 800322c:	602e      	str	r6, [r5, #0]
 800322e:	e7af      	b.n	8003190 <__sflush_r+0x18>
 8003230:	2340      	movs	r3, #64	; 0x40
 8003232:	89a2      	ldrh	r2, [r4, #12]
 8003234:	4313      	orrs	r3, r2
 8003236:	81a3      	strh	r3, [r4, #12]
 8003238:	e7ab      	b.n	8003192 <__sflush_r+0x1a>
 800323a:	2340      	movs	r3, #64	; 0x40
 800323c:	430b      	orrs	r3, r1
 800323e:	2001      	movs	r0, #1
 8003240:	81a3      	strh	r3, [r4, #12]
 8003242:	4240      	negs	r0, r0
 8003244:	e7a5      	b.n	8003192 <__sflush_r+0x1a>
 8003246:	690f      	ldr	r7, [r1, #16]
 8003248:	2f00      	cmp	r7, #0
 800324a:	d0a1      	beq.n	8003190 <__sflush_r+0x18>
 800324c:	680b      	ldr	r3, [r1, #0]
 800324e:	600f      	str	r7, [r1, #0]
 8003250:	1bdb      	subs	r3, r3, r7
 8003252:	9301      	str	r3, [sp, #4]
 8003254:	2300      	movs	r3, #0
 8003256:	0792      	lsls	r2, r2, #30
 8003258:	d100      	bne.n	800325c <__sflush_r+0xe4>
 800325a:	694b      	ldr	r3, [r1, #20]
 800325c:	60a3      	str	r3, [r4, #8]
 800325e:	9b01      	ldr	r3, [sp, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	dc00      	bgt.n	8003266 <__sflush_r+0xee>
 8003264:	e794      	b.n	8003190 <__sflush_r+0x18>
 8003266:	9b01      	ldr	r3, [sp, #4]
 8003268:	003a      	movs	r2, r7
 800326a:	6a21      	ldr	r1, [r4, #32]
 800326c:	0028      	movs	r0, r5
 800326e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003270:	47b0      	blx	r6
 8003272:	2800      	cmp	r0, #0
 8003274:	dc03      	bgt.n	800327e <__sflush_r+0x106>
 8003276:	2340      	movs	r3, #64	; 0x40
 8003278:	89a2      	ldrh	r2, [r4, #12]
 800327a:	4313      	orrs	r3, r2
 800327c:	e7df      	b.n	800323e <__sflush_r+0xc6>
 800327e:	9b01      	ldr	r3, [sp, #4]
 8003280:	183f      	adds	r7, r7, r0
 8003282:	1a1b      	subs	r3, r3, r0
 8003284:	9301      	str	r3, [sp, #4]
 8003286:	e7ea      	b.n	800325e <__sflush_r+0xe6>
 8003288:	20400001 	.word	0x20400001

0800328c <_fflush_r>:
 800328c:	690b      	ldr	r3, [r1, #16]
 800328e:	b570      	push	{r4, r5, r6, lr}
 8003290:	0005      	movs	r5, r0
 8003292:	000c      	movs	r4, r1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <_fflush_r+0x10>
 8003298:	2000      	movs	r0, #0
 800329a:	bd70      	pop	{r4, r5, r6, pc}
 800329c:	2800      	cmp	r0, #0
 800329e:	d004      	beq.n	80032aa <_fflush_r+0x1e>
 80032a0:	6983      	ldr	r3, [r0, #24]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <_fflush_r+0x1e>
 80032a6:	f000 f85f 	bl	8003368 <__sinit>
 80032aa:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <_fflush_r+0x4c>)
 80032ac:	429c      	cmp	r4, r3
 80032ae:	d109      	bne.n	80032c4 <_fflush_r+0x38>
 80032b0:	686c      	ldr	r4, [r5, #4]
 80032b2:	220c      	movs	r2, #12
 80032b4:	5ea3      	ldrsh	r3, [r4, r2]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0ee      	beq.n	8003298 <_fflush_r+0xc>
 80032ba:	0021      	movs	r1, r4
 80032bc:	0028      	movs	r0, r5
 80032be:	f7ff ff5b 	bl	8003178 <__sflush_r>
 80032c2:	e7ea      	b.n	800329a <_fflush_r+0xe>
 80032c4:	4b05      	ldr	r3, [pc, #20]	; (80032dc <_fflush_r+0x50>)
 80032c6:	429c      	cmp	r4, r3
 80032c8:	d101      	bne.n	80032ce <_fflush_r+0x42>
 80032ca:	68ac      	ldr	r4, [r5, #8]
 80032cc:	e7f1      	b.n	80032b2 <_fflush_r+0x26>
 80032ce:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <_fflush_r+0x54>)
 80032d0:	429c      	cmp	r4, r3
 80032d2:	d1ee      	bne.n	80032b2 <_fflush_r+0x26>
 80032d4:	68ec      	ldr	r4, [r5, #12]
 80032d6:	e7ec      	b.n	80032b2 <_fflush_r+0x26>
 80032d8:	0800391c 	.word	0x0800391c
 80032dc:	0800393c 	.word	0x0800393c
 80032e0:	080038fc 	.word	0x080038fc

080032e4 <std>:
 80032e4:	2300      	movs	r3, #0
 80032e6:	b510      	push	{r4, lr}
 80032e8:	0004      	movs	r4, r0
 80032ea:	6003      	str	r3, [r0, #0]
 80032ec:	6043      	str	r3, [r0, #4]
 80032ee:	6083      	str	r3, [r0, #8]
 80032f0:	8181      	strh	r1, [r0, #12]
 80032f2:	6643      	str	r3, [r0, #100]	; 0x64
 80032f4:	81c2      	strh	r2, [r0, #14]
 80032f6:	6103      	str	r3, [r0, #16]
 80032f8:	6143      	str	r3, [r0, #20]
 80032fa:	6183      	str	r3, [r0, #24]
 80032fc:	0019      	movs	r1, r3
 80032fe:	2208      	movs	r2, #8
 8003300:	305c      	adds	r0, #92	; 0x5c
 8003302:	f7ff fdfb 	bl	8002efc <memset>
 8003306:	4b05      	ldr	r3, [pc, #20]	; (800331c <std+0x38>)
 8003308:	6224      	str	r4, [r4, #32]
 800330a:	6263      	str	r3, [r4, #36]	; 0x24
 800330c:	4b04      	ldr	r3, [pc, #16]	; (8003320 <std+0x3c>)
 800330e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003310:	4b04      	ldr	r3, [pc, #16]	; (8003324 <std+0x40>)
 8003312:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003314:	4b04      	ldr	r3, [pc, #16]	; (8003328 <std+0x44>)
 8003316:	6323      	str	r3, [r4, #48]	; 0x30
 8003318:	bd10      	pop	{r4, pc}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	080036dd 	.word	0x080036dd
 8003320:	08003705 	.word	0x08003705
 8003324:	0800373d 	.word	0x0800373d
 8003328:	08003769 	.word	0x08003769

0800332c <_cleanup_r>:
 800332c:	b510      	push	{r4, lr}
 800332e:	4902      	ldr	r1, [pc, #8]	; (8003338 <_cleanup_r+0xc>)
 8003330:	f000 f88c 	bl	800344c <_fwalk_reent>
 8003334:	bd10      	pop	{r4, pc}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	0800328d 	.word	0x0800328d

0800333c <__sfmoreglue>:
 800333c:	b570      	push	{r4, r5, r6, lr}
 800333e:	2568      	movs	r5, #104	; 0x68
 8003340:	1e4a      	subs	r2, r1, #1
 8003342:	4355      	muls	r5, r2
 8003344:	000e      	movs	r6, r1
 8003346:	0029      	movs	r1, r5
 8003348:	3174      	adds	r1, #116	; 0x74
 800334a:	f000 f957 	bl	80035fc <_malloc_r>
 800334e:	1e04      	subs	r4, r0, #0
 8003350:	d008      	beq.n	8003364 <__sfmoreglue+0x28>
 8003352:	2100      	movs	r1, #0
 8003354:	002a      	movs	r2, r5
 8003356:	6001      	str	r1, [r0, #0]
 8003358:	6046      	str	r6, [r0, #4]
 800335a:	300c      	adds	r0, #12
 800335c:	60a0      	str	r0, [r4, #8]
 800335e:	3268      	adds	r2, #104	; 0x68
 8003360:	f7ff fdcc 	bl	8002efc <memset>
 8003364:	0020      	movs	r0, r4
 8003366:	bd70      	pop	{r4, r5, r6, pc}

08003368 <__sinit>:
 8003368:	6983      	ldr	r3, [r0, #24]
 800336a:	b513      	push	{r0, r1, r4, lr}
 800336c:	0004      	movs	r4, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d128      	bne.n	80033c4 <__sinit+0x5c>
 8003372:	6483      	str	r3, [r0, #72]	; 0x48
 8003374:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003376:	6503      	str	r3, [r0, #80]	; 0x50
 8003378:	4b13      	ldr	r3, [pc, #76]	; (80033c8 <__sinit+0x60>)
 800337a:	4a14      	ldr	r2, [pc, #80]	; (80033cc <__sinit+0x64>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6282      	str	r2, [r0, #40]	; 0x28
 8003380:	9301      	str	r3, [sp, #4]
 8003382:	4298      	cmp	r0, r3
 8003384:	d101      	bne.n	800338a <__sinit+0x22>
 8003386:	2301      	movs	r3, #1
 8003388:	6183      	str	r3, [r0, #24]
 800338a:	0020      	movs	r0, r4
 800338c:	f000 f820 	bl	80033d0 <__sfp>
 8003390:	6060      	str	r0, [r4, #4]
 8003392:	0020      	movs	r0, r4
 8003394:	f000 f81c 	bl	80033d0 <__sfp>
 8003398:	60a0      	str	r0, [r4, #8]
 800339a:	0020      	movs	r0, r4
 800339c:	f000 f818 	bl	80033d0 <__sfp>
 80033a0:	2200      	movs	r2, #0
 80033a2:	60e0      	str	r0, [r4, #12]
 80033a4:	2104      	movs	r1, #4
 80033a6:	6860      	ldr	r0, [r4, #4]
 80033a8:	f7ff ff9c 	bl	80032e4 <std>
 80033ac:	2201      	movs	r2, #1
 80033ae:	2109      	movs	r1, #9
 80033b0:	68a0      	ldr	r0, [r4, #8]
 80033b2:	f7ff ff97 	bl	80032e4 <std>
 80033b6:	2202      	movs	r2, #2
 80033b8:	2112      	movs	r1, #18
 80033ba:	68e0      	ldr	r0, [r4, #12]
 80033bc:	f7ff ff92 	bl	80032e4 <std>
 80033c0:	2301      	movs	r3, #1
 80033c2:	61a3      	str	r3, [r4, #24]
 80033c4:	bd13      	pop	{r0, r1, r4, pc}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	080038f8 	.word	0x080038f8
 80033cc:	0800332d 	.word	0x0800332d

080033d0 <__sfp>:
 80033d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d2:	4b1c      	ldr	r3, [pc, #112]	; (8003444 <__sfp+0x74>)
 80033d4:	0007      	movs	r7, r0
 80033d6:	681e      	ldr	r6, [r3, #0]
 80033d8:	69b3      	ldr	r3, [r6, #24]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d102      	bne.n	80033e4 <__sfp+0x14>
 80033de:	0030      	movs	r0, r6
 80033e0:	f7ff ffc2 	bl	8003368 <__sinit>
 80033e4:	3648      	adds	r6, #72	; 0x48
 80033e6:	68b4      	ldr	r4, [r6, #8]
 80033e8:	6873      	ldr	r3, [r6, #4]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	d504      	bpl.n	80033f8 <__sfp+0x28>
 80033ee:	6833      	ldr	r3, [r6, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d007      	beq.n	8003404 <__sfp+0x34>
 80033f4:	6836      	ldr	r6, [r6, #0]
 80033f6:	e7f6      	b.n	80033e6 <__sfp+0x16>
 80033f8:	220c      	movs	r2, #12
 80033fa:	5ea5      	ldrsh	r5, [r4, r2]
 80033fc:	2d00      	cmp	r5, #0
 80033fe:	d00d      	beq.n	800341c <__sfp+0x4c>
 8003400:	3468      	adds	r4, #104	; 0x68
 8003402:	e7f2      	b.n	80033ea <__sfp+0x1a>
 8003404:	2104      	movs	r1, #4
 8003406:	0038      	movs	r0, r7
 8003408:	f7ff ff98 	bl	800333c <__sfmoreglue>
 800340c:	6030      	str	r0, [r6, #0]
 800340e:	2800      	cmp	r0, #0
 8003410:	d1f0      	bne.n	80033f4 <__sfp+0x24>
 8003412:	230c      	movs	r3, #12
 8003414:	0004      	movs	r4, r0
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	0020      	movs	r0, r4
 800341a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800341c:	0020      	movs	r0, r4
 800341e:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <__sfp+0x78>)
 8003420:	6665      	str	r5, [r4, #100]	; 0x64
 8003422:	6025      	str	r5, [r4, #0]
 8003424:	6065      	str	r5, [r4, #4]
 8003426:	60a5      	str	r5, [r4, #8]
 8003428:	60e3      	str	r3, [r4, #12]
 800342a:	6125      	str	r5, [r4, #16]
 800342c:	6165      	str	r5, [r4, #20]
 800342e:	61a5      	str	r5, [r4, #24]
 8003430:	2208      	movs	r2, #8
 8003432:	0029      	movs	r1, r5
 8003434:	305c      	adds	r0, #92	; 0x5c
 8003436:	f7ff fd61 	bl	8002efc <memset>
 800343a:	6365      	str	r5, [r4, #52]	; 0x34
 800343c:	63a5      	str	r5, [r4, #56]	; 0x38
 800343e:	64a5      	str	r5, [r4, #72]	; 0x48
 8003440:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003442:	e7e9      	b.n	8003418 <__sfp+0x48>
 8003444:	080038f8 	.word	0x080038f8
 8003448:	ffff0001 	.word	0xffff0001

0800344c <_fwalk_reent>:
 800344c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800344e:	0004      	movs	r4, r0
 8003450:	0007      	movs	r7, r0
 8003452:	2600      	movs	r6, #0
 8003454:	9101      	str	r1, [sp, #4]
 8003456:	3448      	adds	r4, #72	; 0x48
 8003458:	2c00      	cmp	r4, #0
 800345a:	d101      	bne.n	8003460 <_fwalk_reent+0x14>
 800345c:	0030      	movs	r0, r6
 800345e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003460:	6863      	ldr	r3, [r4, #4]
 8003462:	68a5      	ldr	r5, [r4, #8]
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	9b00      	ldr	r3, [sp, #0]
 8003468:	3b01      	subs	r3, #1
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	d501      	bpl.n	8003472 <_fwalk_reent+0x26>
 800346e:	6824      	ldr	r4, [r4, #0]
 8003470:	e7f2      	b.n	8003458 <_fwalk_reent+0xc>
 8003472:	89ab      	ldrh	r3, [r5, #12]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d908      	bls.n	800348a <_fwalk_reent+0x3e>
 8003478:	220e      	movs	r2, #14
 800347a:	5eab      	ldrsh	r3, [r5, r2]
 800347c:	3301      	adds	r3, #1
 800347e:	d004      	beq.n	800348a <_fwalk_reent+0x3e>
 8003480:	0029      	movs	r1, r5
 8003482:	0038      	movs	r0, r7
 8003484:	9b01      	ldr	r3, [sp, #4]
 8003486:	4798      	blx	r3
 8003488:	4306      	orrs	r6, r0
 800348a:	3568      	adds	r5, #104	; 0x68
 800348c:	e7eb      	b.n	8003466 <_fwalk_reent+0x1a>
	...

08003490 <__swhatbuf_r>:
 8003490:	b570      	push	{r4, r5, r6, lr}
 8003492:	000e      	movs	r6, r1
 8003494:	001d      	movs	r5, r3
 8003496:	230e      	movs	r3, #14
 8003498:	5ec9      	ldrsh	r1, [r1, r3]
 800349a:	b096      	sub	sp, #88	; 0x58
 800349c:	0014      	movs	r4, r2
 800349e:	2900      	cmp	r1, #0
 80034a0:	da07      	bge.n	80034b2 <__swhatbuf_r+0x22>
 80034a2:	2300      	movs	r3, #0
 80034a4:	602b      	str	r3, [r5, #0]
 80034a6:	89b3      	ldrh	r3, [r6, #12]
 80034a8:	061b      	lsls	r3, r3, #24
 80034aa:	d411      	bmi.n	80034d0 <__swhatbuf_r+0x40>
 80034ac:	2380      	movs	r3, #128	; 0x80
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	e00f      	b.n	80034d2 <__swhatbuf_r+0x42>
 80034b2:	466a      	mov	r2, sp
 80034b4:	f000 f984 	bl	80037c0 <_fstat_r>
 80034b8:	2800      	cmp	r0, #0
 80034ba:	dbf2      	blt.n	80034a2 <__swhatbuf_r+0x12>
 80034bc:	22f0      	movs	r2, #240	; 0xf0
 80034be:	9b01      	ldr	r3, [sp, #4]
 80034c0:	0212      	lsls	r2, r2, #8
 80034c2:	4013      	ands	r3, r2
 80034c4:	4a05      	ldr	r2, [pc, #20]	; (80034dc <__swhatbuf_r+0x4c>)
 80034c6:	189b      	adds	r3, r3, r2
 80034c8:	425a      	negs	r2, r3
 80034ca:	4153      	adcs	r3, r2
 80034cc:	602b      	str	r3, [r5, #0]
 80034ce:	e7ed      	b.n	80034ac <__swhatbuf_r+0x1c>
 80034d0:	2340      	movs	r3, #64	; 0x40
 80034d2:	2000      	movs	r0, #0
 80034d4:	6023      	str	r3, [r4, #0]
 80034d6:	b016      	add	sp, #88	; 0x58
 80034d8:	bd70      	pop	{r4, r5, r6, pc}
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	ffffe000 	.word	0xffffe000

080034e0 <__smakebuf_r>:
 80034e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034e2:	2602      	movs	r6, #2
 80034e4:	898b      	ldrh	r3, [r1, #12]
 80034e6:	0005      	movs	r5, r0
 80034e8:	000c      	movs	r4, r1
 80034ea:	4233      	tst	r3, r6
 80034ec:	d006      	beq.n	80034fc <__smakebuf_r+0x1c>
 80034ee:	0023      	movs	r3, r4
 80034f0:	3347      	adds	r3, #71	; 0x47
 80034f2:	6023      	str	r3, [r4, #0]
 80034f4:	6123      	str	r3, [r4, #16]
 80034f6:	2301      	movs	r3, #1
 80034f8:	6163      	str	r3, [r4, #20]
 80034fa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80034fc:	ab01      	add	r3, sp, #4
 80034fe:	466a      	mov	r2, sp
 8003500:	f7ff ffc6 	bl	8003490 <__swhatbuf_r>
 8003504:	9900      	ldr	r1, [sp, #0]
 8003506:	0007      	movs	r7, r0
 8003508:	0028      	movs	r0, r5
 800350a:	f000 f877 	bl	80035fc <_malloc_r>
 800350e:	2800      	cmp	r0, #0
 8003510:	d108      	bne.n	8003524 <__smakebuf_r+0x44>
 8003512:	220c      	movs	r2, #12
 8003514:	5ea3      	ldrsh	r3, [r4, r2]
 8003516:	059a      	lsls	r2, r3, #22
 8003518:	d4ef      	bmi.n	80034fa <__smakebuf_r+0x1a>
 800351a:	2203      	movs	r2, #3
 800351c:	4393      	bics	r3, r2
 800351e:	431e      	orrs	r6, r3
 8003520:	81a6      	strh	r6, [r4, #12]
 8003522:	e7e4      	b.n	80034ee <__smakebuf_r+0xe>
 8003524:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <__smakebuf_r+0x84>)
 8003526:	62ab      	str	r3, [r5, #40]	; 0x28
 8003528:	2380      	movs	r3, #128	; 0x80
 800352a:	89a2      	ldrh	r2, [r4, #12]
 800352c:	6020      	str	r0, [r4, #0]
 800352e:	4313      	orrs	r3, r2
 8003530:	81a3      	strh	r3, [r4, #12]
 8003532:	9b00      	ldr	r3, [sp, #0]
 8003534:	6120      	str	r0, [r4, #16]
 8003536:	6163      	str	r3, [r4, #20]
 8003538:	9b01      	ldr	r3, [sp, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00d      	beq.n	800355a <__smakebuf_r+0x7a>
 800353e:	230e      	movs	r3, #14
 8003540:	5ee1      	ldrsh	r1, [r4, r3]
 8003542:	0028      	movs	r0, r5
 8003544:	f000 f94e 	bl	80037e4 <_isatty_r>
 8003548:	2800      	cmp	r0, #0
 800354a:	d006      	beq.n	800355a <__smakebuf_r+0x7a>
 800354c:	2203      	movs	r2, #3
 800354e:	89a3      	ldrh	r3, [r4, #12]
 8003550:	4393      	bics	r3, r2
 8003552:	001a      	movs	r2, r3
 8003554:	2301      	movs	r3, #1
 8003556:	4313      	orrs	r3, r2
 8003558:	81a3      	strh	r3, [r4, #12]
 800355a:	89a0      	ldrh	r0, [r4, #12]
 800355c:	4338      	orrs	r0, r7
 800355e:	81a0      	strh	r0, [r4, #12]
 8003560:	e7cb      	b.n	80034fa <__smakebuf_r+0x1a>
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	0800332d 	.word	0x0800332d

08003568 <_free_r>:
 8003568:	b570      	push	{r4, r5, r6, lr}
 800356a:	0005      	movs	r5, r0
 800356c:	2900      	cmp	r1, #0
 800356e:	d010      	beq.n	8003592 <_free_r+0x2a>
 8003570:	1f0c      	subs	r4, r1, #4
 8003572:	6823      	ldr	r3, [r4, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	da00      	bge.n	800357a <_free_r+0x12>
 8003578:	18e4      	adds	r4, r4, r3
 800357a:	0028      	movs	r0, r5
 800357c:	f000 f958 	bl	8003830 <__malloc_lock>
 8003580:	4a1d      	ldr	r2, [pc, #116]	; (80035f8 <_free_r+0x90>)
 8003582:	6813      	ldr	r3, [r2, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d105      	bne.n	8003594 <_free_r+0x2c>
 8003588:	6063      	str	r3, [r4, #4]
 800358a:	6014      	str	r4, [r2, #0]
 800358c:	0028      	movs	r0, r5
 800358e:	f000 f950 	bl	8003832 <__malloc_unlock>
 8003592:	bd70      	pop	{r4, r5, r6, pc}
 8003594:	42a3      	cmp	r3, r4
 8003596:	d909      	bls.n	80035ac <_free_r+0x44>
 8003598:	6821      	ldr	r1, [r4, #0]
 800359a:	1860      	adds	r0, r4, r1
 800359c:	4283      	cmp	r3, r0
 800359e:	d1f3      	bne.n	8003588 <_free_r+0x20>
 80035a0:	6818      	ldr	r0, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	1841      	adds	r1, r0, r1
 80035a6:	6021      	str	r1, [r4, #0]
 80035a8:	e7ee      	b.n	8003588 <_free_r+0x20>
 80035aa:	0013      	movs	r3, r2
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	2a00      	cmp	r2, #0
 80035b0:	d001      	beq.n	80035b6 <_free_r+0x4e>
 80035b2:	42a2      	cmp	r2, r4
 80035b4:	d9f9      	bls.n	80035aa <_free_r+0x42>
 80035b6:	6819      	ldr	r1, [r3, #0]
 80035b8:	1858      	adds	r0, r3, r1
 80035ba:	42a0      	cmp	r0, r4
 80035bc:	d10b      	bne.n	80035d6 <_free_r+0x6e>
 80035be:	6820      	ldr	r0, [r4, #0]
 80035c0:	1809      	adds	r1, r1, r0
 80035c2:	1858      	adds	r0, r3, r1
 80035c4:	6019      	str	r1, [r3, #0]
 80035c6:	4282      	cmp	r2, r0
 80035c8:	d1e0      	bne.n	800358c <_free_r+0x24>
 80035ca:	6810      	ldr	r0, [r2, #0]
 80035cc:	6852      	ldr	r2, [r2, #4]
 80035ce:	1841      	adds	r1, r0, r1
 80035d0:	6019      	str	r1, [r3, #0]
 80035d2:	605a      	str	r2, [r3, #4]
 80035d4:	e7da      	b.n	800358c <_free_r+0x24>
 80035d6:	42a0      	cmp	r0, r4
 80035d8:	d902      	bls.n	80035e0 <_free_r+0x78>
 80035da:	230c      	movs	r3, #12
 80035dc:	602b      	str	r3, [r5, #0]
 80035de:	e7d5      	b.n	800358c <_free_r+0x24>
 80035e0:	6821      	ldr	r1, [r4, #0]
 80035e2:	1860      	adds	r0, r4, r1
 80035e4:	4282      	cmp	r2, r0
 80035e6:	d103      	bne.n	80035f0 <_free_r+0x88>
 80035e8:	6810      	ldr	r0, [r2, #0]
 80035ea:	6852      	ldr	r2, [r2, #4]
 80035ec:	1841      	adds	r1, r0, r1
 80035ee:	6021      	str	r1, [r4, #0]
 80035f0:	6062      	str	r2, [r4, #4]
 80035f2:	605c      	str	r4, [r3, #4]
 80035f4:	e7ca      	b.n	800358c <_free_r+0x24>
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	20000090 	.word	0x20000090

080035fc <_malloc_r>:
 80035fc:	2303      	movs	r3, #3
 80035fe:	b570      	push	{r4, r5, r6, lr}
 8003600:	1ccd      	adds	r5, r1, #3
 8003602:	439d      	bics	r5, r3
 8003604:	3508      	adds	r5, #8
 8003606:	0006      	movs	r6, r0
 8003608:	2d0c      	cmp	r5, #12
 800360a:	d21e      	bcs.n	800364a <_malloc_r+0x4e>
 800360c:	250c      	movs	r5, #12
 800360e:	42a9      	cmp	r1, r5
 8003610:	d81d      	bhi.n	800364e <_malloc_r+0x52>
 8003612:	0030      	movs	r0, r6
 8003614:	f000 f90c 	bl	8003830 <__malloc_lock>
 8003618:	4a25      	ldr	r2, [pc, #148]	; (80036b0 <_malloc_r+0xb4>)
 800361a:	6814      	ldr	r4, [r2, #0]
 800361c:	0021      	movs	r1, r4
 800361e:	2900      	cmp	r1, #0
 8003620:	d119      	bne.n	8003656 <_malloc_r+0x5a>
 8003622:	4c24      	ldr	r4, [pc, #144]	; (80036b4 <_malloc_r+0xb8>)
 8003624:	6823      	ldr	r3, [r4, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d103      	bne.n	8003632 <_malloc_r+0x36>
 800362a:	0030      	movs	r0, r6
 800362c:	f000 f844 	bl	80036b8 <_sbrk_r>
 8003630:	6020      	str	r0, [r4, #0]
 8003632:	0029      	movs	r1, r5
 8003634:	0030      	movs	r0, r6
 8003636:	f000 f83f 	bl	80036b8 <_sbrk_r>
 800363a:	1c43      	adds	r3, r0, #1
 800363c:	d12b      	bne.n	8003696 <_malloc_r+0x9a>
 800363e:	230c      	movs	r3, #12
 8003640:	0030      	movs	r0, r6
 8003642:	6033      	str	r3, [r6, #0]
 8003644:	f000 f8f5 	bl	8003832 <__malloc_unlock>
 8003648:	e003      	b.n	8003652 <_malloc_r+0x56>
 800364a:	2d00      	cmp	r5, #0
 800364c:	dadf      	bge.n	800360e <_malloc_r+0x12>
 800364e:	230c      	movs	r3, #12
 8003650:	6033      	str	r3, [r6, #0]
 8003652:	2000      	movs	r0, #0
 8003654:	bd70      	pop	{r4, r5, r6, pc}
 8003656:	680b      	ldr	r3, [r1, #0]
 8003658:	1b5b      	subs	r3, r3, r5
 800365a:	d419      	bmi.n	8003690 <_malloc_r+0x94>
 800365c:	2b0b      	cmp	r3, #11
 800365e:	d903      	bls.n	8003668 <_malloc_r+0x6c>
 8003660:	600b      	str	r3, [r1, #0]
 8003662:	18cc      	adds	r4, r1, r3
 8003664:	6025      	str	r5, [r4, #0]
 8003666:	e003      	b.n	8003670 <_malloc_r+0x74>
 8003668:	684b      	ldr	r3, [r1, #4]
 800366a:	428c      	cmp	r4, r1
 800366c:	d10d      	bne.n	800368a <_malloc_r+0x8e>
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	0030      	movs	r0, r6
 8003672:	f000 f8de 	bl	8003832 <__malloc_unlock>
 8003676:	0020      	movs	r0, r4
 8003678:	2207      	movs	r2, #7
 800367a:	300b      	adds	r0, #11
 800367c:	1d23      	adds	r3, r4, #4
 800367e:	4390      	bics	r0, r2
 8003680:	1ac3      	subs	r3, r0, r3
 8003682:	d0e7      	beq.n	8003654 <_malloc_r+0x58>
 8003684:	425a      	negs	r2, r3
 8003686:	50e2      	str	r2, [r4, r3]
 8003688:	e7e4      	b.n	8003654 <_malloc_r+0x58>
 800368a:	6063      	str	r3, [r4, #4]
 800368c:	000c      	movs	r4, r1
 800368e:	e7ef      	b.n	8003670 <_malloc_r+0x74>
 8003690:	000c      	movs	r4, r1
 8003692:	6849      	ldr	r1, [r1, #4]
 8003694:	e7c3      	b.n	800361e <_malloc_r+0x22>
 8003696:	2303      	movs	r3, #3
 8003698:	1cc4      	adds	r4, r0, #3
 800369a:	439c      	bics	r4, r3
 800369c:	42a0      	cmp	r0, r4
 800369e:	d0e1      	beq.n	8003664 <_malloc_r+0x68>
 80036a0:	1a21      	subs	r1, r4, r0
 80036a2:	0030      	movs	r0, r6
 80036a4:	f000 f808 	bl	80036b8 <_sbrk_r>
 80036a8:	1c43      	adds	r3, r0, #1
 80036aa:	d1db      	bne.n	8003664 <_malloc_r+0x68>
 80036ac:	e7c7      	b.n	800363e <_malloc_r+0x42>
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	20000090 	.word	0x20000090
 80036b4:	20000094 	.word	0x20000094

080036b8 <_sbrk_r>:
 80036b8:	2300      	movs	r3, #0
 80036ba:	b570      	push	{r4, r5, r6, lr}
 80036bc:	4c06      	ldr	r4, [pc, #24]	; (80036d8 <_sbrk_r+0x20>)
 80036be:	0005      	movs	r5, r0
 80036c0:	0008      	movs	r0, r1
 80036c2:	6023      	str	r3, [r4, #0]
 80036c4:	f7fd faa8 	bl	8000c18 <_sbrk>
 80036c8:	1c43      	adds	r3, r0, #1
 80036ca:	d103      	bne.n	80036d4 <_sbrk_r+0x1c>
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d000      	beq.n	80036d4 <_sbrk_r+0x1c>
 80036d2:	602b      	str	r3, [r5, #0]
 80036d4:	bd70      	pop	{r4, r5, r6, pc}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	20000248 	.word	0x20000248

080036dc <__sread>:
 80036dc:	b570      	push	{r4, r5, r6, lr}
 80036de:	000c      	movs	r4, r1
 80036e0:	250e      	movs	r5, #14
 80036e2:	5f49      	ldrsh	r1, [r1, r5]
 80036e4:	f000 f8a6 	bl	8003834 <_read_r>
 80036e8:	2800      	cmp	r0, #0
 80036ea:	db03      	blt.n	80036f4 <__sread+0x18>
 80036ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80036ee:	181b      	adds	r3, r3, r0
 80036f0:	6563      	str	r3, [r4, #84]	; 0x54
 80036f2:	bd70      	pop	{r4, r5, r6, pc}
 80036f4:	89a3      	ldrh	r3, [r4, #12]
 80036f6:	4a02      	ldr	r2, [pc, #8]	; (8003700 <__sread+0x24>)
 80036f8:	4013      	ands	r3, r2
 80036fa:	81a3      	strh	r3, [r4, #12]
 80036fc:	e7f9      	b.n	80036f2 <__sread+0x16>
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	ffffefff 	.word	0xffffefff

08003704 <__swrite>:
 8003704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003706:	001f      	movs	r7, r3
 8003708:	898b      	ldrh	r3, [r1, #12]
 800370a:	0005      	movs	r5, r0
 800370c:	000c      	movs	r4, r1
 800370e:	0016      	movs	r6, r2
 8003710:	05db      	lsls	r3, r3, #23
 8003712:	d505      	bpl.n	8003720 <__swrite+0x1c>
 8003714:	230e      	movs	r3, #14
 8003716:	5ec9      	ldrsh	r1, [r1, r3]
 8003718:	2200      	movs	r2, #0
 800371a:	2302      	movs	r3, #2
 800371c:	f000 f874 	bl	8003808 <_lseek_r>
 8003720:	89a3      	ldrh	r3, [r4, #12]
 8003722:	4a05      	ldr	r2, [pc, #20]	; (8003738 <__swrite+0x34>)
 8003724:	0028      	movs	r0, r5
 8003726:	4013      	ands	r3, r2
 8003728:	81a3      	strh	r3, [r4, #12]
 800372a:	0032      	movs	r2, r6
 800372c:	230e      	movs	r3, #14
 800372e:	5ee1      	ldrsh	r1, [r4, r3]
 8003730:	003b      	movs	r3, r7
 8003732:	f000 f81f 	bl	8003774 <_write_r>
 8003736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003738:	ffffefff 	.word	0xffffefff

0800373c <__sseek>:
 800373c:	b570      	push	{r4, r5, r6, lr}
 800373e:	000c      	movs	r4, r1
 8003740:	250e      	movs	r5, #14
 8003742:	5f49      	ldrsh	r1, [r1, r5]
 8003744:	f000 f860 	bl	8003808 <_lseek_r>
 8003748:	89a3      	ldrh	r3, [r4, #12]
 800374a:	1c42      	adds	r2, r0, #1
 800374c:	d103      	bne.n	8003756 <__sseek+0x1a>
 800374e:	4a05      	ldr	r2, [pc, #20]	; (8003764 <__sseek+0x28>)
 8003750:	4013      	ands	r3, r2
 8003752:	81a3      	strh	r3, [r4, #12]
 8003754:	bd70      	pop	{r4, r5, r6, pc}
 8003756:	2280      	movs	r2, #128	; 0x80
 8003758:	0152      	lsls	r2, r2, #5
 800375a:	4313      	orrs	r3, r2
 800375c:	81a3      	strh	r3, [r4, #12]
 800375e:	6560      	str	r0, [r4, #84]	; 0x54
 8003760:	e7f8      	b.n	8003754 <__sseek+0x18>
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	ffffefff 	.word	0xffffefff

08003768 <__sclose>:
 8003768:	b510      	push	{r4, lr}
 800376a:	230e      	movs	r3, #14
 800376c:	5ec9      	ldrsh	r1, [r1, r3]
 800376e:	f000 f815 	bl	800379c <_close_r>
 8003772:	bd10      	pop	{r4, pc}

08003774 <_write_r>:
 8003774:	b570      	push	{r4, r5, r6, lr}
 8003776:	0005      	movs	r5, r0
 8003778:	0008      	movs	r0, r1
 800377a:	0011      	movs	r1, r2
 800377c:	2200      	movs	r2, #0
 800377e:	4c06      	ldr	r4, [pc, #24]	; (8003798 <_write_r+0x24>)
 8003780:	6022      	str	r2, [r4, #0]
 8003782:	001a      	movs	r2, r3
 8003784:	f7fd f8a4 	bl	80008d0 <_write>
 8003788:	1c43      	adds	r3, r0, #1
 800378a:	d103      	bne.n	8003794 <_write_r+0x20>
 800378c:	6823      	ldr	r3, [r4, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d000      	beq.n	8003794 <_write_r+0x20>
 8003792:	602b      	str	r3, [r5, #0]
 8003794:	bd70      	pop	{r4, r5, r6, pc}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	20000248 	.word	0x20000248

0800379c <_close_r>:
 800379c:	2300      	movs	r3, #0
 800379e:	b570      	push	{r4, r5, r6, lr}
 80037a0:	4c06      	ldr	r4, [pc, #24]	; (80037bc <_close_r+0x20>)
 80037a2:	0005      	movs	r5, r0
 80037a4:	0008      	movs	r0, r1
 80037a6:	6023      	str	r3, [r4, #0]
 80037a8:	f7fd fa0a 	bl	8000bc0 <_close>
 80037ac:	1c43      	adds	r3, r0, #1
 80037ae:	d103      	bne.n	80037b8 <_close_r+0x1c>
 80037b0:	6823      	ldr	r3, [r4, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d000      	beq.n	80037b8 <_close_r+0x1c>
 80037b6:	602b      	str	r3, [r5, #0]
 80037b8:	bd70      	pop	{r4, r5, r6, pc}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	20000248 	.word	0x20000248

080037c0 <_fstat_r>:
 80037c0:	2300      	movs	r3, #0
 80037c2:	b570      	push	{r4, r5, r6, lr}
 80037c4:	4c06      	ldr	r4, [pc, #24]	; (80037e0 <_fstat_r+0x20>)
 80037c6:	0005      	movs	r5, r0
 80037c8:	0008      	movs	r0, r1
 80037ca:	0011      	movs	r1, r2
 80037cc:	6023      	str	r3, [r4, #0]
 80037ce:	f7fd fa01 	bl	8000bd4 <_fstat>
 80037d2:	1c43      	adds	r3, r0, #1
 80037d4:	d103      	bne.n	80037de <_fstat_r+0x1e>
 80037d6:	6823      	ldr	r3, [r4, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d000      	beq.n	80037de <_fstat_r+0x1e>
 80037dc:	602b      	str	r3, [r5, #0]
 80037de:	bd70      	pop	{r4, r5, r6, pc}
 80037e0:	20000248 	.word	0x20000248

080037e4 <_isatty_r>:
 80037e4:	2300      	movs	r3, #0
 80037e6:	b570      	push	{r4, r5, r6, lr}
 80037e8:	4c06      	ldr	r4, [pc, #24]	; (8003804 <_isatty_r+0x20>)
 80037ea:	0005      	movs	r5, r0
 80037ec:	0008      	movs	r0, r1
 80037ee:	6023      	str	r3, [r4, #0]
 80037f0:	f7fd f9fe 	bl	8000bf0 <_isatty>
 80037f4:	1c43      	adds	r3, r0, #1
 80037f6:	d103      	bne.n	8003800 <_isatty_r+0x1c>
 80037f8:	6823      	ldr	r3, [r4, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d000      	beq.n	8003800 <_isatty_r+0x1c>
 80037fe:	602b      	str	r3, [r5, #0]
 8003800:	bd70      	pop	{r4, r5, r6, pc}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	20000248 	.word	0x20000248

08003808 <_lseek_r>:
 8003808:	b570      	push	{r4, r5, r6, lr}
 800380a:	0005      	movs	r5, r0
 800380c:	0008      	movs	r0, r1
 800380e:	0011      	movs	r1, r2
 8003810:	2200      	movs	r2, #0
 8003812:	4c06      	ldr	r4, [pc, #24]	; (800382c <_lseek_r+0x24>)
 8003814:	6022      	str	r2, [r4, #0]
 8003816:	001a      	movs	r2, r3
 8003818:	f7fd f9f3 	bl	8000c02 <_lseek>
 800381c:	1c43      	adds	r3, r0, #1
 800381e:	d103      	bne.n	8003828 <_lseek_r+0x20>
 8003820:	6823      	ldr	r3, [r4, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d000      	beq.n	8003828 <_lseek_r+0x20>
 8003826:	602b      	str	r3, [r5, #0]
 8003828:	bd70      	pop	{r4, r5, r6, pc}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	20000248 	.word	0x20000248

08003830 <__malloc_lock>:
 8003830:	4770      	bx	lr

08003832 <__malloc_unlock>:
 8003832:	4770      	bx	lr

08003834 <_read_r>:
 8003834:	b570      	push	{r4, r5, r6, lr}
 8003836:	0005      	movs	r5, r0
 8003838:	0008      	movs	r0, r1
 800383a:	0011      	movs	r1, r2
 800383c:	2200      	movs	r2, #0
 800383e:	4c06      	ldr	r4, [pc, #24]	; (8003858 <_read_r+0x24>)
 8003840:	6022      	str	r2, [r4, #0]
 8003842:	001a      	movs	r2, r3
 8003844:	f7fd f99f 	bl	8000b86 <_read>
 8003848:	1c43      	adds	r3, r0, #1
 800384a:	d103      	bne.n	8003854 <_read_r+0x20>
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d000      	beq.n	8003854 <_read_r+0x20>
 8003852:	602b      	str	r3, [r5, #0]
 8003854:	bd70      	pop	{r4, r5, r6, pc}
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	20000248 	.word	0x20000248

0800385c <_init>:
 800385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003862:	bc08      	pop	{r3}
 8003864:	469e      	mov	lr, r3
 8003866:	4770      	bx	lr

08003868 <_fini>:
 8003868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386e:	bc08      	pop	{r3}
 8003870:	469e      	mov	lr, r3
 8003872:	4770      	bx	lr
